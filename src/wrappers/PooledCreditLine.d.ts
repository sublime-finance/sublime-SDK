/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface PooledCreditLineInterface extends ethers.utils.Interface {
  functions: {
    'LENDER_POOL()': FunctionFragment;
    'PRICE_ORACLE()': FunctionFragment;
    'SAVINGS_ACCOUNT()': FunctionFragment;
    'STRATEGY_REGISTRY()': FunctionFragment;
    'USDC()': FunctionFragment;
    'VERIFICATION()': FunctionFragment;
    'accept(uint256,uint256)': FunctionFragment;
    'borrow(uint256,uint256)': FunctionFragment;
    'calculateBorrowableAmount(uint256)': FunctionFragment;
    'calculateCurrentCollateralRatio(uint256)': FunctionFragment;
    'calculateCurrentDebt(uint256)': FunctionFragment;
    'calculateInterestAccrued(uint256)': FunctionFragment;
    'calculateTotalCollateralTokens(uint256)': FunctionFragment;
    'cancelRequest(uint256)': FunctionFragment;
    'cancelRequestOnLowCollection(uint256)': FunctionFragment;
    'cancelRequestOnRequestedStateAtEnd(uint256)': FunctionFragment;
    'close(uint256)': FunctionFragment;
    'collateralTokensToLiquidate(uint256,uint256)': FunctionFragment;
    'depositCollateral(uint256,uint256,bool)': FunctionFragment;
    'depositedCollateralInShares(uint256)': FunctionFragment;
    'getEndsAt(uint256)': FunctionFragment;
    'getPrincipal(uint256)': FunctionFragment;
    'getRequiredCollateral(uint256,uint256)': FunctionFragment;
    'getStatusAndUpdate(uint256)': FunctionFragment;
    'initialize(address,uint256,address)': FunctionFragment;
    'liquidate(uint256)': FunctionFragment;
    'maximumProtocolFeeFraction()': FunctionFragment;
    'owner()': FunctionFragment;
    'pooledCreditLineConstants(uint256)': FunctionFragment;
    'pooledCreditLineCounter()': FunctionFragment;
    'pooledCreditLineVariables(uint256)': FunctionFragment;
    'protocolFeeCollector()': FunctionFragment;
    'protocolFeeFraction()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repay(uint256,uint256)': FunctionFragment;
    'request(tuple)': FunctionFragment;
    'terminate(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateBorrowLimitLimits(uint256,uint256)': FunctionFragment;
    'updateBorrowRateLimits(uint256,uint256)': FunctionFragment;
    'updateCollectionPeriodLimits(uint256,uint256)': FunctionFragment;
    'updateDefaultGracePeriodLimits(uint256,uint256)': FunctionFragment;
    'updateDurationLimits(uint256,uint256)': FunctionFragment;
    'updateGracePenaltyRateLimits(uint256,uint256)': FunctionFragment;
    'updateIdealCollateralRatioLimits(uint256,uint256)': FunctionFragment;
    'updateProtocolFeeCollector(address)': FunctionFragment;
    'updateProtocolFeeFraction(uint256)': FunctionFragment;
    'withdrawAllCollateral(uint256,bool)': FunctionFragment;
    'withdrawCollateral(uint256,uint256,bool)': FunctionFragment;
    'withdrawableCollateral(uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'LENDER_POOL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PRICE_ORACLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SAVINGS_ACCOUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'STRATEGY_REGISTRY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'USDC', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERIFICATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accept', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'borrow', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateBorrowableAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateCurrentCollateralRatio', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateCurrentDebt', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateInterestAccrued', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateTotalCollateralTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'cancelRequest', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'cancelRequestOnLowCollection', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'cancelRequestOnRequestedStateAtEnd', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'close', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'collateralTokensToLiquidate', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositCollateral', values: [BigNumberish, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'depositedCollateralInShares', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getEndsAt', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPrincipal', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getRequiredCollateral', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getStatusAndUpdate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'liquidate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'maximumProtocolFeeFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pooledCreditLineConstants', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'pooledCreditLineCounter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pooledCreditLineVariables', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'protocolFeeCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolFeeFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repay', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'request',
    values: [
      {
        collateralRatio: BigNumberish;
        duration: BigNumberish;
        lenderVerifier: string;
        defaultGracePeriod: BigNumberish;
        gracePenaltyRate: BigNumberish;
        collectionPeriod: BigNumberish;
        minBorrowAmount: BigNumberish;
        borrowLimit: BigNumberish;
        borrowRate: BigNumberish;
        collateralAsset: string;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        borrowAsset: string;
        borrowerVerifier: string;
        areTokensTransferable: boolean;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: 'terminate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateBorrowLimitLimits', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateBorrowRateLimits', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateCollectionPeriodLimits', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateDefaultGracePeriodLimits', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateDurationLimits', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateGracePenaltyRateLimits', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateIdealCollateralRatioLimits', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateProtocolFeeCollector', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateProtocolFeeFraction', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawAllCollateral', values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'withdrawCollateral', values: [BigNumberish, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'withdrawableCollateral', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'LENDER_POOL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PRICE_ORACLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SAVINGS_ACCOUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'STRATEGY_REGISTRY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'USDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERIFICATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accept', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateBorrowableAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateCurrentCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateCurrentDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateInterestAccrued', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateTotalCollateralTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelRequestOnLowCollection', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelRequestOnRequestedStateAtEnd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'close', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralTokensToLiquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositedCollateralInShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEndsAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPrincipal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRequiredCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStatusAndUpdate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maximumProtocolFeeFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pooledCreditLineConstants', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pooledCreditLineCounter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pooledCreditLineVariables', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolFeeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolFeeFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'request', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'terminate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBorrowLimitLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBorrowRateLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateCollectionPeriodLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDefaultGracePeriodLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDurationLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateGracePenaltyRateLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateIdealCollateralRatioLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProtocolFeeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProtocolFeeFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAllCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawableCollateral', data: BytesLike): Result;

  events: {
    'BorrowedFromPooledCreditLine(uint256,uint256)': EventFragment;
    'CollateralDeposited(uint256,uint256,address)': EventFragment;
    'CollateralWithdrawn(uint256,uint256)': EventFragment;
    'CompletePooledCreditLineRepaid(uint256,address,uint256)': EventFragment;
    'LimitsUpdated(string,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PartialPooledCreditLineRepaid(uint256,address,uint256)': EventFragment;
    'PooledCreditLineAccepted(uint256,uint256)': EventFragment;
    'PooledCreditLineCancelled(uint256,string)': EventFragment;
    'PooledCreditLineClosed(uint256)': EventFragment;
    'PooledCreditLineLiquidated(uint256)': EventFragment;
    'PooledCreditLineRequested(uint256,address,address)': EventFragment;
    'PooledCreditLineTerminated(uint256)': EventFragment;
    'ProtocolFeeCollectorUpdated(address)': EventFragment;
    'ProtocolFeeFractionUpdated(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BorrowedFromPooledCreditLine'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralDeposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CompletePooledCreditLineRepaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LimitsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PartialPooledCreditLineRepaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PooledCreditLineAccepted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PooledCreditLineCancelled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PooledCreditLineClosed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PooledCreditLineLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PooledCreditLineRequested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PooledCreditLineTerminated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeCollectorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeFractionUpdated'): EventFragment;
}

export class PooledCreditLine extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PooledCreditLineInterface;

  functions: {
    LENDER_POOL(overrides?: CallOverrides): Promise<[string]>;

    'LENDER_POOL()'(overrides?: CallOverrides): Promise<[string]>;

    PRICE_ORACLE(overrides?: CallOverrides): Promise<[string]>;

    'PRICE_ORACLE()'(overrides?: CallOverrides): Promise<[string]>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<[string]>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<[string]>;

    STRATEGY_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    'STRATEGY_REGISTRY()'(overrides?: CallOverrides): Promise<[string]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    'USDC()'(overrides?: CallOverrides): Promise<[string]>;

    VERIFICATION(overrides?: CallOverrides): Promise<[string]>;

    'VERIFICATION()'(overrides?: CallOverrides): Promise<[string]>;

    accept(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'accept(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'borrow(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateBorrowableAmount(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'calculateBorrowableAmount(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateCurrentCollateralRatio(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'calculateCurrentCollateralRatio(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateCurrentDebt(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'calculateCurrentDebt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateInterestAccrued(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'calculateInterestAccrued(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateTotalCollateralTokens(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'calculateTotalCollateralTokens(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelRequest(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'cancelRequest(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    cancelRequestOnLowCollection(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'cancelRequestOnLowCollection(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelRequestOnRequestedStateAtEnd(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'cancelRequestOnRequestedStateAtEnd(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    close(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'close(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    collateralTokensToLiquidate(_id: BigNumberish, _borrowTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'collateralTokensToLiquidate(uint256,uint256)'(
      _id: BigNumberish,
      _borrowTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'depositCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositedCollateralInShares(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'depositedCollateralInShares(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getEndsAt(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getEndsAt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrincipal(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getPrincipal(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRequiredCollateral(_id: BigNumberish, _borrowTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getRequiredCollateral(uint256,uint256)'(
      _id: BigNumberish,
      _borrowTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStatusAndUpdate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'getStatusAndUpdate(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(address,uint256,address)'(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'liquidate(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    maximumProtocolFeeFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'maximumProtocolFeeFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    pooledCreditLineConstants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
        borrowLimit: BigNumber;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        borrower: string;
        borrowAsset: string;
        collateralAsset: string;
        startsAt: BigNumber;
        endsAt: BigNumber;
        defaultsAt: BigNumber;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        gracePenaltyRate: BigNumber;
      }
    >;

    'pooledCreditLineConstants(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
        borrowLimit: BigNumber;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        borrower: string;
        borrowAsset: string;
        collateralAsset: string;
        startsAt: BigNumber;
        endsAt: BigNumber;
        defaultsAt: BigNumber;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        gracePenaltyRate: BigNumber;
      }
    >;

    pooledCreditLineCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    'pooledCreditLineCounter()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    pooledCreditLineVariables(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillLastPrincipalUpdate: BigNumber;
      }
    >;

    'pooledCreditLineVariables(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillLastPrincipalUpdate: BigNumber;
      }
    >;

    protocolFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    repay(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'repay(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    request(
      _request: {
        collateralRatio: BigNumberish;
        duration: BigNumberish;
        lenderVerifier: string;
        defaultGracePeriod: BigNumberish;
        gracePenaltyRate: BigNumberish;
        collectionPeriod: BigNumberish;
        minBorrowAmount: BigNumberish;
        borrowLimit: BigNumberish;
        borrowRate: BigNumberish;
        collateralAsset: string;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        borrowAsset: string;
        borrowerVerifier: string;
        areTokensTransferable: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'request((uint256,uint256,address,uint256,uint256,uint256,uint256,uint128,uint128,address,address,address,address,address,bool))'(
      _request: {
        collateralRatio: BigNumberish;
        duration: BigNumberish;
        lenderVerifier: string;
        defaultGracePeriod: BigNumberish;
        gracePenaltyRate: BigNumberish;
        collectionPeriod: BigNumberish;
        minBorrowAmount: BigNumberish;
        borrowLimit: BigNumberish;
        borrowRate: BigNumberish;
        collateralAsset: string;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        borrowAsset: string;
        borrowerVerifier: string;
        areTokensTransferable: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    terminate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'terminate(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBorrowLimitLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateBorrowLimitLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBorrowRateLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateBorrowRateLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollectionPeriodLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateCollectionPeriodLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDefaultGracePeriodLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateDefaultGracePeriodLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDurationLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateDurationLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGracePenaltyRateLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateGracePenaltyRateLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIdealCollateralRatioLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateIdealCollateralRatioLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolFeeFraction(
      _protocolFeeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFeeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllCollateral(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawAllCollateral(uint256,bool)'(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawableCollateral(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'withdrawableCollateral(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LENDER_POOL(overrides?: CallOverrides): Promise<string>;

  'LENDER_POOL()'(overrides?: CallOverrides): Promise<string>;

  PRICE_ORACLE(overrides?: CallOverrides): Promise<string>;

  'PRICE_ORACLE()'(overrides?: CallOverrides): Promise<string>;

  SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<string>;

  'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<string>;

  STRATEGY_REGISTRY(overrides?: CallOverrides): Promise<string>;

  'STRATEGY_REGISTRY()'(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  'USDC()'(overrides?: CallOverrides): Promise<string>;

  VERIFICATION(overrides?: CallOverrides): Promise<string>;

  'VERIFICATION()'(overrides?: CallOverrides): Promise<string>;

  accept(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'accept(uint256,uint256)'(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'borrow(uint256,uint256)'(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateBorrowableAmount(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'calculateBorrowableAmount(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateCurrentCollateralRatio(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'calculateCurrentCollateralRatio(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateCurrentDebt(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'calculateCurrentDebt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  calculateInterestAccrued(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'calculateInterestAccrued(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  calculateTotalCollateralTokens(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'calculateTotalCollateralTokens(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelRequest(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'cancelRequest(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  cancelRequestOnLowCollection(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'cancelRequestOnLowCollection(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelRequestOnRequestedStateAtEnd(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'cancelRequestOnRequestedStateAtEnd(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  close(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'close(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  collateralTokensToLiquidate(_id: BigNumberish, _borrowTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'collateralTokensToLiquidate(uint256,uint256)'(
    _id: BigNumberish,
    _borrowTokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositCollateral(
    _id: BigNumberish,
    _amount: BigNumberish,
    _fromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'depositCollateral(uint256,uint256,bool)'(
    _id: BigNumberish,
    _amount: BigNumberish,
    _fromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositedCollateralInShares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'depositedCollateralInShares(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getEndsAt(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'getEndsAt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getPrincipal(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'getPrincipal(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getRequiredCollateral(_id: BigNumberish, _borrowTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'getRequiredCollateral(uint256,uint256)'(
    _id: BigNumberish,
    _borrowTokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStatusAndUpdate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'getStatusAndUpdate(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    _protocolFeeFraction: BigNumberish,
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(address,uint256,address)'(
    _owner: string,
    _protocolFeeFraction: BigNumberish,
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'liquidate(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  maximumProtocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'maximumProtocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  pooledCreditLineConstants(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string, string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
      borrowLimit: BigNumber;
      borrowRate: BigNumber;
      idealCollateralRatio: BigNumber;
      borrower: string;
      borrowAsset: string;
      collateralAsset: string;
      startsAt: BigNumber;
      endsAt: BigNumber;
      defaultsAt: BigNumber;
      borrowAssetStrategy: string;
      collateralAssetStrategy: string;
      gracePenaltyRate: BigNumber;
    }
  >;

  'pooledCreditLineConstants(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string, string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
      borrowLimit: BigNumber;
      borrowRate: BigNumber;
      idealCollateralRatio: BigNumber;
      borrower: string;
      borrowAsset: string;
      collateralAsset: string;
      startsAt: BigNumber;
      endsAt: BigNumber;
      defaultsAt: BigNumber;
      borrowAssetStrategy: string;
      collateralAssetStrategy: string;
      gracePenaltyRate: BigNumber;
    }
  >;

  pooledCreditLineCounter(overrides?: CallOverrides): Promise<BigNumber>;

  'pooledCreditLineCounter()'(overrides?: CallOverrides): Promise<BigNumber>;

  pooledCreditLineVariables(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      principal: BigNumber;
      totalInterestRepaid: BigNumber;
      lastPrincipalUpdateTime: BigNumber;
      interestAccruedTillLastPrincipalUpdate: BigNumber;
    }
  >;

  'pooledCreditLineVariables(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      principal: BigNumber;
      totalInterestRepaid: BigNumber;
      lastPrincipalUpdateTime: BigNumber;
      interestAccruedTillLastPrincipalUpdate: BigNumber;
    }
  >;

  protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

  'protocolFeeCollector()'(overrides?: CallOverrides): Promise<string>;

  protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  repay(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'repay(uint256,uint256)'(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  request(
    _request: {
      collateralRatio: BigNumberish;
      duration: BigNumberish;
      lenderVerifier: string;
      defaultGracePeriod: BigNumberish;
      gracePenaltyRate: BigNumberish;
      collectionPeriod: BigNumberish;
      minBorrowAmount: BigNumberish;
      borrowLimit: BigNumberish;
      borrowRate: BigNumberish;
      collateralAsset: string;
      borrowAssetStrategy: string;
      collateralAssetStrategy: string;
      borrowAsset: string;
      borrowerVerifier: string;
      areTokensTransferable: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'request((uint256,uint256,address,uint256,uint256,uint256,uint256,uint128,uint128,address,address,address,address,address,bool))'(
    _request: {
      collateralRatio: BigNumberish;
      duration: BigNumberish;
      lenderVerifier: string;
      defaultGracePeriod: BigNumberish;
      gracePenaltyRate: BigNumberish;
      collectionPeriod: BigNumberish;
      minBorrowAmount: BigNumberish;
      borrowLimit: BigNumberish;
      borrowRate: BigNumberish;
      collateralAsset: string;
      borrowAssetStrategy: string;
      collateralAssetStrategy: string;
      borrowAsset: string;
      borrowerVerifier: string;
      areTokensTransferable: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  terminate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'terminate(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  updateBorrowLimitLimits(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateBorrowLimitLimits(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBorrowRateLimits(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateBorrowRateLimits(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollectionPeriodLimits(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateCollectionPeriodLimits(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDefaultGracePeriodLimits(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateDefaultGracePeriodLimits(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDurationLimits(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateDurationLimits(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGracePenaltyRateLimits(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateGracePenaltyRateLimits(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIdealCollateralRatioLimits(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateIdealCollateralRatioLimits(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolFeeCollector(
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateProtocolFeeCollector(address)'(
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolFeeFraction(
    _protocolFeeFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateProtocolFeeFraction(uint256)'(
    _protocolFeeFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllCollateral(
    _id: BigNumberish,
    _toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawAllCollateral(uint256,bool)'(
    _id: BigNumberish,
    _toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    _id: BigNumberish,
    _amount: BigNumberish,
    _toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawCollateral(uint256,uint256,bool)'(
    _id: BigNumberish,
    _amount: BigNumberish,
    _toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawableCollateral(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'withdrawableCollateral(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LENDER_POOL(overrides?: CallOverrides): Promise<string>;

    'LENDER_POOL()'(overrides?: CallOverrides): Promise<string>;

    PRICE_ORACLE(overrides?: CallOverrides): Promise<string>;

    'PRICE_ORACLE()'(overrides?: CallOverrides): Promise<string>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<string>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<string>;

    STRATEGY_REGISTRY(overrides?: CallOverrides): Promise<string>;

    'STRATEGY_REGISTRY()'(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    'USDC()'(overrides?: CallOverrides): Promise<string>;

    VERIFICATION(overrides?: CallOverrides): Promise<string>;

    'VERIFICATION()'(overrides?: CallOverrides): Promise<string>;

    accept(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'accept(uint256,uint256)'(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    borrow(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'borrow(uint256,uint256)'(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    calculateBorrowableAmount(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateBorrowableAmount(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateCurrentCollateralRatio(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentCollateralRatio(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateCurrentDebt(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentDebt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterestAccrued(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateInterestAccrued(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalCollateralTokens(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateTotalCollateralTokens(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    cancelRequest(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'cancelRequest(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelRequestOnLowCollection(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'cancelRequestOnLowCollection(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelRequestOnRequestedStateAtEnd(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'cancelRequestOnRequestedStateAtEnd(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    close(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'close(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    collateralTokensToLiquidate(_id: BigNumberish, _borrowTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'collateralTokensToLiquidate(uint256,uint256)'(
      _id: BigNumberish,
      _borrowTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(_id: BigNumberish, _amount: BigNumberish, _fromSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'depositCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    depositedCollateralInShares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'depositedCollateralInShares(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getEndsAt(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getEndsAt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPrincipal(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getPrincipal(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredCollateral(_id: BigNumberish, _borrowTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getRequiredCollateral(uint256,uint256)'(
      _id: BigNumberish,
      _borrowTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatusAndUpdate(_id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    'getStatusAndUpdate(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    initialize(_owner: string, _protocolFeeFraction: BigNumberish, _protocolFeeCollector: string, overrides?: CallOverrides): Promise<void>;

    'initialize(address,uint256,address)'(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(_id: BigNumberish, overrides?: CallOverrides): Promise<[string, BigNumber]>;

    'liquidate(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<[string, BigNumber]>;

    maximumProtocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'maximumProtocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    pooledCreditLineConstants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
        borrowLimit: BigNumber;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        borrower: string;
        borrowAsset: string;
        collateralAsset: string;
        startsAt: BigNumber;
        endsAt: BigNumber;
        defaultsAt: BigNumber;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        gracePenaltyRate: BigNumber;
      }
    >;

    'pooledCreditLineConstants(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
        borrowLimit: BigNumber;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        borrower: string;
        borrowAsset: string;
        collateralAsset: string;
        startsAt: BigNumber;
        endsAt: BigNumber;
        defaultsAt: BigNumber;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        gracePenaltyRate: BigNumber;
      }
    >;

    pooledCreditLineCounter(overrides?: CallOverrides): Promise<BigNumber>;

    'pooledCreditLineCounter()'(overrides?: CallOverrides): Promise<BigNumber>;

    pooledCreditLineVariables(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillLastPrincipalUpdate: BigNumber;
      }
    >;

    'pooledCreditLineVariables(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillLastPrincipalUpdate: BigNumber;
      }
    >;

    protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<string>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    repay(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'repay(uint256,uint256)'(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    request(
      _request: {
        collateralRatio: BigNumberish;
        duration: BigNumberish;
        lenderVerifier: string;
        defaultGracePeriod: BigNumberish;
        gracePenaltyRate: BigNumberish;
        collectionPeriod: BigNumberish;
        minBorrowAmount: BigNumberish;
        borrowLimit: BigNumberish;
        borrowRate: BigNumberish;
        collateralAsset: string;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        borrowAsset: string;
        borrowerVerifier: string;
        areTokensTransferable: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'request((uint256,uint256,address,uint256,uint256,uint256,uint256,uint128,uint128,address,address,address,address,address,bool))'(
      _request: {
        collateralRatio: BigNumberish;
        duration: BigNumberish;
        lenderVerifier: string;
        defaultGracePeriod: BigNumberish;
        gracePenaltyRate: BigNumberish;
        collectionPeriod: BigNumberish;
        minBorrowAmount: BigNumberish;
        borrowLimit: BigNumberish;
        borrowRate: BigNumberish;
        collateralAsset: string;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        borrowAsset: string;
        borrowerVerifier: string;
        areTokensTransferable: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    terminate(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'terminate(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateBorrowLimitLimits(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateBorrowLimitLimits(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateBorrowRateLimits(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateBorrowRateLimits(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateCollectionPeriodLimits(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateCollectionPeriodLimits(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateDefaultGracePeriodLimits(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateDefaultGracePeriodLimits(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateDurationLimits(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateDurationLimits(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateGracePenaltyRateLimits(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateGracePenaltyRateLimits(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateIdealCollateralRatioLimits(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateIdealCollateralRatioLimits(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateProtocolFeeCollector(_protocolFeeCollector: string, overrides?: CallOverrides): Promise<void>;

    'updateProtocolFeeCollector(address)'(_protocolFeeCollector: string, overrides?: CallOverrides): Promise<void>;

    updateProtocolFeeFraction(_protocolFeeFraction: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateProtocolFeeFraction(uint256)'(_protocolFeeFraction: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAllCollateral(_id: BigNumberish, _toSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'withdrawAllCollateral(uint256,bool)'(_id: BigNumberish, _toSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    withdrawCollateral(_id: BigNumberish, _amount: BigNumberish, _toSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'withdrawCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawableCollateral(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'withdrawableCollateral(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    BorrowedFromPooledCreditLine(
      id: BigNumberish | null,
      borrowAmount: null
    ): TypedEventFilter<[BigNumber, BigNumber], { id: BigNumber; borrowAmount: BigNumber }>;

    CollateralDeposited(
      id: BigNumberish | null,
      shares: null,
      strategy: string | null
    ): TypedEventFilter<[BigNumber, BigNumber, string], { id: BigNumber; shares: BigNumber; strategy: string }>;

    CollateralWithdrawn(
      id: BigNumberish | null,
      shares: null
    ): TypedEventFilter<[BigNumber, BigNumber], { id: BigNumber; shares: BigNumber }>;

    CompletePooledCreditLineRepaid(
      id: BigNumberish | null,
      repayer: string | null,
      repayAmount: null
    ): TypedEventFilter<[BigNumber, string, BigNumber], { id: BigNumber; repayer: string; repayAmount: BigNumber }>;

    LimitsUpdated(
      limitType: string | null,
      min: null,
      max: null
    ): TypedEventFilter<[string, BigNumber, BigNumber], { limitType: string; min: BigNumber; max: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    PartialPooledCreditLineRepaid(
      id: BigNumberish | null,
      repayer: string | null,
      repayAmount: null
    ): TypedEventFilter<[BigNumber, string, BigNumber], { id: BigNumber; repayer: string; repayAmount: BigNumber }>;

    PooledCreditLineAccepted(
      id: BigNumberish | null,
      amount: null
    ): TypedEventFilter<[BigNumber, BigNumber], { id: BigNumber; amount: BigNumber }>;

    PooledCreditLineCancelled(
      id: BigNumberish | null,
      reason: string | null
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; reason: string }>;

    PooledCreditLineClosed(id: BigNumberish | null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    PooledCreditLineLiquidated(id: BigNumberish | null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    PooledCreditLineRequested(
      id: BigNumberish | null,
      borrower: string | null,
      borrowerVerifier: string | null
    ): TypedEventFilter<[BigNumber, string, string], { id: BigNumber; borrower: string; borrowerVerifier: string }>;

    PooledCreditLineTerminated(id: BigNumberish | null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    ProtocolFeeCollectorUpdated(
      updatedProtocolFeeCollector: string | null
    ): TypedEventFilter<[string], { updatedProtocolFeeCollector: string }>;

    ProtocolFeeFractionUpdated(updatedProtocolFee: null): TypedEventFilter<[BigNumber], { updatedProtocolFee: BigNumber }>;
  };

  estimateGas: {
    LENDER_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    'LENDER_POOL()'(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    'PRICE_ORACLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<BigNumber>;

    STRATEGY_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    'STRATEGY_REGISTRY()'(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    'USDC()'(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFICATION(overrides?: CallOverrides): Promise<BigNumber>;

    'VERIFICATION()'(overrides?: CallOverrides): Promise<BigNumber>;

    accept(_id: BigNumberish, _amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'accept(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(_id: BigNumberish, _amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'borrow(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateBorrowableAmount(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'calculateBorrowableAmount(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateCurrentCollateralRatio(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'calculateCurrentCollateralRatio(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateCurrentDebt(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentDebt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterestAccrued(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateInterestAccrued(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalCollateralTokens(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'calculateTotalCollateralTokens(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelRequest(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'cancelRequest(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    cancelRequestOnLowCollection(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'cancelRequestOnLowCollection(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelRequestOnRequestedStateAtEnd(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'cancelRequestOnRequestedStateAtEnd(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    close(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'close(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    collateralTokensToLiquidate(_id: BigNumberish, _borrowTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'collateralTokensToLiquidate(uint256,uint256)'(
      _id: BigNumberish,
      _borrowTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'depositCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositedCollateralInShares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'depositedCollateralInShares(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getEndsAt(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getEndsAt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPrincipal(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getPrincipal(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredCollateral(_id: BigNumberish, _borrowTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getRequiredCollateral(uint256,uint256)'(
      _id: BigNumberish,
      _borrowTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatusAndUpdate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'getStatusAndUpdate(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    initialize(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(address,uint256,address)'(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'liquidate(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    maximumProtocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'maximumProtocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    pooledCreditLineConstants(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'pooledCreditLineConstants(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pooledCreditLineCounter(overrides?: CallOverrides): Promise<BigNumber>;

    'pooledCreditLineCounter()'(overrides?: CallOverrides): Promise<BigNumber>;

    pooledCreditLineVariables(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'pooledCreditLineVariables(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    repay(_id: BigNumberish, _amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'repay(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    request(
      _request: {
        collateralRatio: BigNumberish;
        duration: BigNumberish;
        lenderVerifier: string;
        defaultGracePeriod: BigNumberish;
        gracePenaltyRate: BigNumberish;
        collectionPeriod: BigNumberish;
        minBorrowAmount: BigNumberish;
        borrowLimit: BigNumberish;
        borrowRate: BigNumberish;
        collateralAsset: string;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        borrowAsset: string;
        borrowerVerifier: string;
        areTokensTransferable: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'request((uint256,uint256,address,uint256,uint256,uint256,uint256,uint128,uint128,address,address,address,address,address,bool))'(
      _request: {
        collateralRatio: BigNumberish;
        duration: BigNumberish;
        lenderVerifier: string;
        defaultGracePeriod: BigNumberish;
        gracePenaltyRate: BigNumberish;
        collectionPeriod: BigNumberish;
        minBorrowAmount: BigNumberish;
        borrowLimit: BigNumberish;
        borrowRate: BigNumberish;
        collateralAsset: string;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        borrowAsset: string;
        borrowerVerifier: string;
        areTokensTransferable: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    terminate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'terminate(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateBorrowLimitLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateBorrowLimitLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBorrowRateLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateBorrowRateLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollectionPeriodLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateCollectionPeriodLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDefaultGracePeriodLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateDefaultGracePeriodLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDurationLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateDurationLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGracePenaltyRateLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateGracePenaltyRateLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIdealCollateralRatioLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateIdealCollateralRatioLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProtocolFeeFraction(
      _protocolFeeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFeeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllCollateral(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawAllCollateral(uint256,bool)'(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawableCollateral(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawableCollateral(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    LENDER_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'LENDER_POOL()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PRICE_ORACLE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STRATEGY_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'STRATEGY_REGISTRY()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'USDC()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERIFICATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'VERIFICATION()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accept(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'accept(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'borrow(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateBorrowableAmount(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateBorrowableAmount(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateCurrentCollateralRatio(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateCurrentCollateralRatio(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateCurrentDebt(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'calculateCurrentDebt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateInterestAccrued(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'calculateInterestAccrued(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateTotalCollateralTokens(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateTotalCollateralTokens(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelRequest(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'cancelRequest(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    cancelRequestOnLowCollection(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'cancelRequestOnLowCollection(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelRequestOnRequestedStateAtEnd(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'cancelRequestOnRequestedStateAtEnd(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    close(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'close(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    collateralTokensToLiquidate(
      _id: BigNumberish,
      _borrowTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'collateralTokensToLiquidate(uint256,uint256)'(
      _id: BigNumberish,
      _borrowTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'depositCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositedCollateralInShares(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'depositedCollateralInShares(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEndsAt(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getEndsAt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrincipal(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getPrincipal(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequiredCollateral(_id: BigNumberish, _borrowTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getRequiredCollateral(uint256,uint256)'(
      _id: BigNumberish,
      _borrowTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatusAndUpdate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'getStatusAndUpdate(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(address,uint256,address)'(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'liquidate(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    maximumProtocolFeeFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'maximumProtocolFeeFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pooledCreditLineConstants(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'pooledCreditLineConstants(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pooledCreditLineCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'pooledCreditLineCounter()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pooledCreditLineVariables(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'pooledCreditLineVariables(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    repay(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'repay(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    request(
      _request: {
        collateralRatio: BigNumberish;
        duration: BigNumberish;
        lenderVerifier: string;
        defaultGracePeriod: BigNumberish;
        gracePenaltyRate: BigNumberish;
        collectionPeriod: BigNumberish;
        minBorrowAmount: BigNumberish;
        borrowLimit: BigNumberish;
        borrowRate: BigNumberish;
        collateralAsset: string;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        borrowAsset: string;
        borrowerVerifier: string;
        areTokensTransferable: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'request((uint256,uint256,address,uint256,uint256,uint256,uint256,uint128,uint128,address,address,address,address,address,bool))'(
      _request: {
        collateralRatio: BigNumberish;
        duration: BigNumberish;
        lenderVerifier: string;
        defaultGracePeriod: BigNumberish;
        gracePenaltyRate: BigNumberish;
        collectionPeriod: BigNumberish;
        minBorrowAmount: BigNumberish;
        borrowLimit: BigNumberish;
        borrowRate: BigNumberish;
        collateralAsset: string;
        borrowAssetStrategy: string;
        collateralAssetStrategy: string;
        borrowAsset: string;
        borrowerVerifier: string;
        areTokensTransferable: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    terminate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'terminate(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBorrowLimitLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateBorrowLimitLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBorrowRateLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateBorrowRateLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollectionPeriodLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateCollectionPeriodLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDefaultGracePeriodLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateDefaultGracePeriodLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDurationLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateDurationLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGracePenaltyRateLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateGracePenaltyRateLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIdealCollateralRatioLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateIdealCollateralRatioLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolFeeFraction(
      _protocolFeeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFeeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllCollateral(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawAllCollateral(uint256,bool)'(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawableCollateral(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'withdrawableCollateral(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
