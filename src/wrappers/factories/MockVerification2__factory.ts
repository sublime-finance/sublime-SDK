/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';

import type { MockVerification2 } from '../MockVerification2';

export class MockVerification2__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MockVerification2> {
    return super.deploy(overrides || {}) as Promise<MockVerification2>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockVerification2 {
    return super.attach(address) as MockVerification2;
  }
  connect(signer: Signer): MockVerification2__factory {
    return super.connect(signer) as MockVerification2__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockVerification2 {
    return new Contract(address, _abi, signerOrProvider) as MockVerification2;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_verifier',
        type: 'address',
      },
    ],
    name: 'isUser',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
    ],
    name: 'unverifyUser',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'verifiedUsers',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'verifiers',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_verifier',
        type: 'address',
      },
    ],
    name: 'verifyUser',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_verifier',
        type: 'address',
      },
    ],
    name: 'whitelistVerifier',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610405806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806302d43dc8146100675780631a78192b146100a95780636c824487146100d757806396603b87146100fd578063c463333414610125578063f3b9025c1461014b575b600080fd5b6100956004803603604081101561007d57600080fd5b506001600160a01b0381358116916020013516610179565b604080519115158252519081900360200190f35b610095600480360360408110156100bf57600080fd5b506001600160a01b03813581169160200135166101a8565b610095600480360360208110156100ed57600080fd5b50356001600160a01b03166101c8565b6101236004803603602081101561011357600080fd5b50356001600160a01b03166101dd565b005b6101236004803603602081101561013b57600080fd5b50356001600160a01b0316610201565b6101236004803603604081101561016157600080fd5b506001600160a01b03813581169160200135166102e0565b6001600160a01b0380821660009081526001602090815260408083209386168352929052205460ff1692915050565b600160209081526000928352604080842090915290825290205460ff1681565b60006020819052908152604090205460ff1681565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b3360009081526020819052604090205460ff1661024f5760405162461bcd60e51b815260040180806020018281038252602c81526020018061036b602c913960400191505060405180910390fd5b3360009081526001602090815260408083206001600160a01b038516845290915290205460ff16156102b25760405162461bcd60e51b81526004018080602001828103825260398152602001806103976039913960400191505060405180910390fd5b3360009081526001602090815260408083206001600160a01b0394909416835292905220805460ff19169055565b6001600160a01b03811660009081526020819052604090205460ff1615610338576001600160a01b0380821660009081526001602081815260408084209487168452939052919020805460ff19169091179055610366565b6001600160a01b038082166000908152600160209081526040808320938616835292905220805460ff191690555b505056fe4f6e6c7920617574686f72697a6564207665726966696572732063616e20756e766572696679207573657273557365722065697468657220616c726561647920756e7665726966696564206f7220776173206e6f7420766572696669656420627920796f75a2646970667358221220041ef8c3e2e163f31fc2dafdf4528b2dd2d391689f6038b5197d6c1c7316d78d64736f6c63430007060033';
