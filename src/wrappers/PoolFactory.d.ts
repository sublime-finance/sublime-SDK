/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface PoolFactoryInterface extends ethers.utils.Interface {
  functions: {
    'beacon()': FunctionFragment;
    'borrowRateLimit()': FunctionFragment;
    'collectionPeriod()': FunctionFragment;
    'createPool(uint256,uint256,address,address,uint256,uint64,uint64,address,uint256,bool,bytes32,address,address)': FunctionFragment;
    'getProtocolFeeData()': FunctionFragment;
    'idealCollateralRatioLimit()': FunctionFragment;
    'initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address)': FunctionFragment;
    'isBorrowToken(address)': FunctionFragment;
    'isCollateralToken(address)': FunctionFragment;
    'liquidatorRewardFraction()': FunctionFragment;
    'loanWithdrawalDuration()': FunctionFragment;
    'marginCallDuration()': FunctionFragment;
    'minBorrowFraction()': FunctionFragment;
    'noOfRepaymentIntervalsLimit()': FunctionFragment;
    'noStrategyAddress()': FunctionFragment;
    'owner()': FunctionFragment;
    'poolCancelPenaltyMultiple()': FunctionFragment;
    'poolRegistry(address)': FunctionFragment;
    'poolSizeLimit()': FunctionFragment;
    'preComputeAddress(address,bytes32)': FunctionFragment;
    'priceOracle()': FunctionFragment;
    'protocolFeeCollector()': FunctionFragment;
    'protocolFeeFraction()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repaymentImpl()': FunctionFragment;
    'repaymentIntervalLimit()': FunctionFragment;
    'savingsAccount()': FunctionFragment;
    'setImplementations(address,address,address,address,address)': FunctionFragment;
    'strategyRegistry()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateBorrowRateLimit(uint256,uint256)': FunctionFragment;
    'updateCollectionPeriod(uint256)': FunctionFragment;
    'updateLiquidatorRewardFraction(uint256)': FunctionFragment;
    'updateLoanWithdrawalDuration(uint256)': FunctionFragment;
    'updateMarginCallDuration(uint256)': FunctionFragment;
    'updateMinBorrowFraction(uint256)': FunctionFragment;
    'updateNoOfRepaymentIntervalsLimit(uint256,uint256)': FunctionFragment;
    'updateNoStrategy(address)': FunctionFragment;
    'updatePoolCancelPenaltyMultiple(uint256)': FunctionFragment;
    'updatePoolSizeLimit(uint256,uint256)': FunctionFragment;
    'updatePriceoracle(address)': FunctionFragment;
    'updateProtocolFeeCollector(address)': FunctionFragment;
    'updateProtocolFeeFraction(uint256)': FunctionFragment;
    'updateRepaymentImpl(address)': FunctionFragment;
    'updateRepaymentIntervalLimit(uint256,uint256)': FunctionFragment;
    'updateSavingsAccount(address)': FunctionFragment;
    'updateStrategyRegistry(address)': FunctionFragment;
    'updateSupportedBorrowTokens(address,bool)': FunctionFragment;
    'updateSupportedCollateralTokens(address,bool)': FunctionFragment;
    'updateUserRegistry(address)': FunctionFragment;
    'updateidealCollateralRatioLimit(uint256,uint256)': FunctionFragment;
    'usdcAsset()': FunctionFragment;
    'userRegistry()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'beacon', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowRateLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collectionPeriod', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createPool',
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BytesLike,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: 'getProtocolFeeData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'idealCollateralRatioLimit', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: 'isBorrowToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'isCollateralToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'liquidatorRewardFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'loanWithdrawalDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marginCallDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minBorrowFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'noOfRepaymentIntervalsLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'noStrategyAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolCancelPenaltyMultiple', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolSizeLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'preComputeAddress', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'priceOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolFeeCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolFeeFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repaymentImpl', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repaymentIntervalLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'savingsAccount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setImplementations', values: [string, string, string, string, string]): string;
  encodeFunctionData(functionFragment: 'strategyRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateBorrowRateLimit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateCollectionPeriod', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateLiquidatorRewardFraction', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateLoanWithdrawalDuration', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateMarginCallDuration', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateMinBorrowFraction', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateNoOfRepaymentIntervalsLimit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateNoStrategy', values: [string]): string;
  encodeFunctionData(functionFragment: 'updatePoolCancelPenaltyMultiple', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updatePoolSizeLimit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updatePriceoracle', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateProtocolFeeCollector', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateProtocolFeeFraction', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateRepaymentImpl', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateRepaymentIntervalLimit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateSavingsAccount', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateStrategyRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateSupportedBorrowTokens', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'updateSupportedCollateralTokens', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'updateUserRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateidealCollateralRatioLimit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'usdcAsset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userRegistry', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'beacon', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowRateLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectionPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProtocolFeeData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'idealCollateralRatioLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isBorrowToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isCollateralToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidatorRewardFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loanWithdrawalDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marginCallDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minBorrowFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'noOfRepaymentIntervalsLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'noStrategyAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolCancelPenaltyMultiple', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolSizeLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'preComputeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolFeeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolFeeFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repaymentImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repaymentIntervalLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'savingsAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setImplementations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBorrowRateLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateCollectionPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLiquidatorRewardFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLoanWithdrawalDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMarginCallDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinBorrowFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateNoOfRepaymentIntervalsLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateNoStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePoolCancelPenaltyMultiple', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePoolSizeLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePriceoracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProtocolFeeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProtocolFeeFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRepaymentImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRepaymentIntervalLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSavingsAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStrategyRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSupportedBorrowTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSupportedCollateralTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateUserRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateidealCollateralRatioLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdcAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRegistry', data: BytesLike): Result;

  events: {
    'BorrowTokenUpdated(address,bool)': EventFragment;
    'CollateralTokenUpdated(address,bool)': EventFragment;
    'CollectionPeriodUpdated(uint256)': EventFragment;
    'LimitsUpdated(string,uint256,uint256)': EventFragment;
    'LiquidatorRewardFractionUpdated(uint256)': EventFragment;
    'LoanWithdrawalDurationUpdated(uint256)': EventFragment;
    'MarginCallDurationUpdated(uint256)': EventFragment;
    'MinBorrowFractionUpdated(uint256)': EventFragment;
    'NoStrategyUpdated(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PoolCancelPenaltyMultipleUpdated(uint256)': EventFragment;
    'PoolCreated(address,address)': EventFragment;
    'PoolInitSelectorUpdated(bytes4)': EventFragment;
    'PoolLogicUpdated(address)': EventFragment;
    'PriceOracleUpdated(address)': EventFragment;
    'ProtocolFeeCollectorUpdated(address)': EventFragment;
    'ProtocolFeeFractionUpdated(uint256)': EventFragment;
    'RepaymentImplUpdated(address)': EventFragment;
    'SavingsAccountUpdated(address)': EventFragment;
    'StrategyRegistryUpdated(address)': EventFragment;
    'UserRegistryUpdated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BorrowTokenUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralTokenUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollectionPeriodUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LimitsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidatorRewardFractionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LoanWithdrawalDurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarginCallDurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinBorrowFractionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NoStrategyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolCancelPenaltyMultipleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolInitSelectorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolLogicUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PriceOracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeCollectorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeFractionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RepaymentImplUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SavingsAccountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyRegistryUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserRegistryUpdated'): EventFragment;
}

export class PoolFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolFactoryInterface;

  functions: {
    beacon(overrides?: CallOverrides): Promise<[string]>;

    'beacon()'(overrides?: CallOverrides): Promise<[string]>;

    borrowRateLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'borrowRateLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    collectionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPool(
      _poolSize: BigNumberish,
      _borrowRate: BigNumberish,
      _borrowToken: string,
      _collateralToken: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _salt: BytesLike,
      _borrowerVerifier: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'createPool(uint256,uint256,address,address,uint256,uint64,uint64,address,uint256,bool,bytes32,address,address)'(
      _poolSize: BigNumberish,
      _borrowRate: BigNumberish,
      _borrowToken: string,
      _collateralToken: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _salt: BytesLike,
      _borrowerVerifier: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    idealCollateralRatioLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'idealCollateralRatioLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    initialize(
      _admin: string,
      _collectionPeriod: BigNumberish,
      _loanWithdrawalDuration: BigNumberish,
      _marginCallDuration: BigNumberish,
      _liquidatorRewardFraction: BigNumberish,
      _poolCancelPenaltyMultiple: BigNumberish,
      _minBorrowFraction: BigNumberish,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _noStrategy: string,
      _beacon: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address)'(
      _admin: string,
      _collectionPeriod: BigNumberish,
      _loanWithdrawalDuration: BigNumberish,
      _marginCallDuration: BigNumberish,
      _liquidatorRewardFraction: BigNumberish,
      _poolCancelPenaltyMultiple: BigNumberish,
      _minBorrowFraction: BigNumberish,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _noStrategy: string,
      _beacon: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isBorrowToken(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'isBorrowToken(address)'(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    isCollateralToken(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'isCollateralToken(address)'(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    loanWithdrawalDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    'loanWithdrawalDuration()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    marginCallDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBorrowFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'minBorrowFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    noOfRepaymentIntervalsLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'noOfRepaymentIntervalsLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    noStrategyAddress(overrides?: CallOverrides): Promise<[string]>;

    'noStrategyAddress()'(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    poolCancelPenaltyMultiple(overrides?: CallOverrides): Promise<[BigNumber]>;

    'poolCancelPenaltyMultiple()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolRegistry(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'poolRegistry(address)'(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    poolSizeLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'poolSizeLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    preComputeAddress(creator: string, salt: BytesLike, overrides?: CallOverrides): Promise<[string] & { predicted: string }>;

    'preComputeAddress(address,bytes32)'(
      creator: string,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { predicted: string }>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    'priceOracle()'(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    repaymentImpl(overrides?: CallOverrides): Promise<[string]>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<[string]>;

    repaymentIntervalLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'repaymentIntervalLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    savingsAccount(overrides?: CallOverrides): Promise<[string]>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<[string]>;

    setImplementations(
      _repaymentImpl: string,
      _userRegistry: string,
      _strategyRegistry: string,
      _priceOracle: string,
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setImplementations(address,address,address,address,address)'(
      _repaymentImpl: string,
      _userRegistry: string,
      _strategyRegistry: string,
      _priceOracle: string,
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyRegistry(overrides?: CallOverrides): Promise<[string]>;

    'strategyRegistry()'(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBorrowRateLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateBorrowRateLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollectionPeriod(
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateCollectionPeriod(uint256)'(
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiquidatorRewardFraction(
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateLiquidatorRewardFraction(uint256)'(
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLoanWithdrawalDuration(
      _loanWithdrawalDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateLoanWithdrawalDuration(uint256)'(
      _loanWithdrawalDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarginCallDuration(
      _marginCallDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateMarginCallDuration(uint256)'(
      _marginCallDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinBorrowFraction(
      _minBorrowFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateMinBorrowFraction(uint256)'(
      _minBorrowFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNoOfRepaymentIntervalsLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateNoOfRepaymentIntervalsLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNoStrategy(_noStrategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'updateNoStrategy(address)'(
      _noStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolCancelPenaltyMultiple(
      _poolCancelPenaltyMultiple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updatePoolCancelPenaltyMultiple(uint256)'(
      _poolCancelPenaltyMultiple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolSizeLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updatePoolSizeLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriceoracle(_priceOracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'updatePriceoracle(address)'(
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolFeeFraction(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRepaymentImpl(_repaymentImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'updateRepaymentImpl(address)'(
      _repaymentImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRepaymentIntervalLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateRepaymentIntervalLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSavingsAccount(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateSavingsAccount(address)'(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStrategyRegistry(
      _strategyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateStrategyRegistry(address)'(
      _strategyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSupportedBorrowTokens(
      _borrowToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateSupportedBorrowTokens(address,bool)'(
      _borrowToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSupportedCollateralTokens(
      _collateralToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateSupportedCollateralTokens(address,bool)'(
      _collateralToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUserRegistry(_userRegistry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'updateUserRegistry(address)'(
      _userRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateidealCollateralRatioLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateidealCollateralRatioLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdcAsset(overrides?: CallOverrides): Promise<[string]>;

    'usdcAsset()'(overrides?: CallOverrides): Promise<[string]>;

    userRegistry(overrides?: CallOverrides): Promise<[string]>;

    'userRegistry()'(overrides?: CallOverrides): Promise<[string]>;
  };

  beacon(overrides?: CallOverrides): Promise<string>;

  'beacon()'(overrides?: CallOverrides): Promise<string>;

  borrowRateLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  'borrowRateLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  collectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  'collectionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

  createPool(
    _poolSize: BigNumberish,
    _borrowRate: BigNumberish,
    _borrowToken: string,
    _collateralToken: string,
    _idealCollateralRatio: BigNumberish,
    _repaymentInterval: BigNumberish,
    _noOfRepaymentIntervals: BigNumberish,
    _poolSavingsStrategy: string,
    _collateralAmount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    _salt: BytesLike,
    _borrowerVerifier: string,
    _lenderVerifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'createPool(uint256,uint256,address,address,uint256,uint64,uint64,address,uint256,bool,bytes32,address,address)'(
    _poolSize: BigNumberish,
    _borrowRate: BigNumberish,
    _borrowToken: string,
    _collateralToken: string,
    _idealCollateralRatio: BigNumberish,
    _repaymentInterval: BigNumberish,
    _noOfRepaymentIntervals: BigNumberish,
    _poolSavingsStrategy: string,
    _collateralAmount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    _salt: BytesLike,
    _borrowerVerifier: string,
    _lenderVerifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProtocolFeeData(overrides?: CallOverrides): Promise<[BigNumber, string]>;

  'getProtocolFeeData()'(overrides?: CallOverrides): Promise<[BigNumber, string]>;

  idealCollateralRatioLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  'idealCollateralRatioLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  initialize(
    _admin: string,
    _collectionPeriod: BigNumberish,
    _loanWithdrawalDuration: BigNumberish,
    _marginCallDuration: BigNumberish,
    _liquidatorRewardFraction: BigNumberish,
    _poolCancelPenaltyMultiple: BigNumberish,
    _minBorrowFraction: BigNumberish,
    _protocolFeeFraction: BigNumberish,
    _protocolFeeCollector: string,
    _noStrategy: string,
    _beacon: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address)'(
    _admin: string,
    _collectionPeriod: BigNumberish,
    _loanWithdrawalDuration: BigNumberish,
    _marginCallDuration: BigNumberish,
    _liquidatorRewardFraction: BigNumberish,
    _poolCancelPenaltyMultiple: BigNumberish,
    _minBorrowFraction: BigNumberish,
    _protocolFeeFraction: BigNumberish,
    _protocolFeeCollector: string,
    _noStrategy: string,
    _beacon: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isBorrowToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'isBorrowToken(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  isCollateralToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'isCollateralToken(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  loanWithdrawalDuration(overrides?: CallOverrides): Promise<BigNumber>;

  'loanWithdrawalDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

  marginCallDuration(overrides?: CallOverrides): Promise<BigNumber>;

  'marginCallDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

  minBorrowFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'minBorrowFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  noOfRepaymentIntervalsLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  'noOfRepaymentIntervalsLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  noStrategyAddress(overrides?: CallOverrides): Promise<string>;

  'noStrategyAddress()'(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  poolCancelPenaltyMultiple(overrides?: CallOverrides): Promise<BigNumber>;

  'poolCancelPenaltyMultiple()'(overrides?: CallOverrides): Promise<BigNumber>;

  poolRegistry(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'poolRegistry(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  poolSizeLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  'poolSizeLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  preComputeAddress(creator: string, salt: BytesLike, overrides?: CallOverrides): Promise<string>;

  'preComputeAddress(address,bytes32)'(creator: string, salt: BytesLike, overrides?: CallOverrides): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  'priceOracle()'(overrides?: CallOverrides): Promise<string>;

  protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

  'protocolFeeCollector()'(overrides?: CallOverrides): Promise<string>;

  protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  repaymentImpl(overrides?: CallOverrides): Promise<string>;

  'repaymentImpl()'(overrides?: CallOverrides): Promise<string>;

  repaymentIntervalLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  'repaymentIntervalLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  savingsAccount(overrides?: CallOverrides): Promise<string>;

  'savingsAccount()'(overrides?: CallOverrides): Promise<string>;

  setImplementations(
    _repaymentImpl: string,
    _userRegistry: string,
    _strategyRegistry: string,
    _priceOracle: string,
    _savingsAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setImplementations(address,address,address,address,address)'(
    _repaymentImpl: string,
    _userRegistry: string,
    _strategyRegistry: string,
    _priceOracle: string,
    _savingsAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyRegistry(overrides?: CallOverrides): Promise<string>;

  'strategyRegistry()'(overrides?: CallOverrides): Promise<string>;

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  updateBorrowRateLimit(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateBorrowRateLimit(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollectionPeriod(
    _collectionPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateCollectionPeriod(uint256)'(
    _collectionPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiquidatorRewardFraction(
    _liquidatorRewardFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateLiquidatorRewardFraction(uint256)'(
    _liquidatorRewardFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLoanWithdrawalDuration(
    _loanWithdrawalDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateLoanWithdrawalDuration(uint256)'(
    _loanWithdrawalDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarginCallDuration(
    _marginCallDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateMarginCallDuration(uint256)'(
    _marginCallDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinBorrowFraction(
    _minBorrowFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateMinBorrowFraction(uint256)'(
    _minBorrowFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNoOfRepaymentIntervalsLimit(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateNoOfRepaymentIntervalsLimit(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNoStrategy(_noStrategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'updateNoStrategy(address)'(
    _noStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolCancelPenaltyMultiple(
    _poolCancelPenaltyMultiple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updatePoolCancelPenaltyMultiple(uint256)'(
    _poolCancelPenaltyMultiple: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolSizeLimit(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updatePoolSizeLimit(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriceoracle(_priceOracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'updatePriceoracle(address)'(
    _priceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolFeeCollector(
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateProtocolFeeCollector(address)'(
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolFeeFraction(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateProtocolFeeFraction(uint256)'(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRepaymentImpl(_repaymentImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'updateRepaymentImpl(address)'(
    _repaymentImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRepaymentIntervalLimit(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateRepaymentIntervalLimit(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSavingsAccount(_savingsAccount: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'updateSavingsAccount(address)'(
    _savingsAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStrategyRegistry(
    _strategyRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateStrategyRegistry(address)'(
    _strategyRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSupportedBorrowTokens(
    _borrowToken: string,
    _isSupported: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateSupportedBorrowTokens(address,bool)'(
    _borrowToken: string,
    _isSupported: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSupportedCollateralTokens(
    _collateralToken: string,
    _isSupported: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateSupportedCollateralTokens(address,bool)'(
    _collateralToken: string,
    _isSupported: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUserRegistry(_userRegistry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'updateUserRegistry(address)'(
    _userRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateidealCollateralRatioLimit(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateidealCollateralRatioLimit(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdcAsset(overrides?: CallOverrides): Promise<string>;

  'usdcAsset()'(overrides?: CallOverrides): Promise<string>;

  userRegistry(overrides?: CallOverrides): Promise<string>;

  'userRegistry()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    beacon(overrides?: CallOverrides): Promise<string>;

    'beacon()'(overrides?: CallOverrides): Promise<string>;

    borrowRateLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'borrowRateLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    collectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      _poolSize: BigNumberish,
      _borrowRate: BigNumberish,
      _borrowToken: string,
      _collateralToken: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _salt: BytesLike,
      _borrowerVerifier: string,
      _lenderVerifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'createPool(uint256,uint256,address,address,uint256,uint64,uint64,address,uint256,bool,bytes32,address,address)'(
      _poolSize: BigNumberish,
      _borrowRate: BigNumberish,
      _borrowToken: string,
      _collateralToken: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _salt: BytesLike,
      _borrowerVerifier: string,
      _lenderVerifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    idealCollateralRatioLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'idealCollateralRatioLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    initialize(
      _admin: string,
      _collectionPeriod: BigNumberish,
      _loanWithdrawalDuration: BigNumberish,
      _marginCallDuration: BigNumberish,
      _liquidatorRewardFraction: BigNumberish,
      _poolCancelPenaltyMultiple: BigNumberish,
      _minBorrowFraction: BigNumberish,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _noStrategy: string,
      _beacon: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address)'(
      _admin: string,
      _collectionPeriod: BigNumberish,
      _loanWithdrawalDuration: BigNumberish,
      _marginCallDuration: BigNumberish,
      _liquidatorRewardFraction: BigNumberish,
      _poolCancelPenaltyMultiple: BigNumberish,
      _minBorrowFraction: BigNumberish,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _noStrategy: string,
      _beacon: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isBorrowToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isBorrowToken(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isCollateralToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isCollateralToken(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    loanWithdrawalDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'loanWithdrawalDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    marginCallDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    minBorrowFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'minBorrowFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    noOfRepaymentIntervalsLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'noOfRepaymentIntervalsLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    noStrategyAddress(overrides?: CallOverrides): Promise<string>;

    'noStrategyAddress()'(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    poolCancelPenaltyMultiple(overrides?: CallOverrides): Promise<BigNumber>;

    'poolCancelPenaltyMultiple()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolRegistry(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'poolRegistry(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolSizeLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'poolSizeLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    preComputeAddress(creator: string, salt: BytesLike, overrides?: CallOverrides): Promise<string>;

    'preComputeAddress(address,bytes32)'(creator: string, salt: BytesLike, overrides?: CallOverrides): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    'priceOracle()'(overrides?: CallOverrides): Promise<string>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<string>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    repaymentImpl(overrides?: CallOverrides): Promise<string>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<string>;

    repaymentIntervalLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'repaymentIntervalLimit()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    savingsAccount(overrides?: CallOverrides): Promise<string>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<string>;

    setImplementations(
      _repaymentImpl: string,
      _userRegistry: string,
      _strategyRegistry: string,
      _priceOracle: string,
      _savingsAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'setImplementations(address,address,address,address,address)'(
      _repaymentImpl: string,
      _userRegistry: string,
      _strategyRegistry: string,
      _priceOracle: string,
      _savingsAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyRegistry(overrides?: CallOverrides): Promise<string>;

    'strategyRegistry()'(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateBorrowRateLimit(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateBorrowRateLimit(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateCollectionPeriod(_collectionPeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateCollectionPeriod(uint256)'(_collectionPeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateLiquidatorRewardFraction(_liquidatorRewardFraction: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateLiquidatorRewardFraction(uint256)'(_liquidatorRewardFraction: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateLoanWithdrawalDuration(_loanWithdrawalDuration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateLoanWithdrawalDuration(uint256)'(_loanWithdrawalDuration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateMarginCallDuration(_marginCallDuration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateMarginCallDuration(uint256)'(_marginCallDuration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateMinBorrowFraction(_minBorrowFraction: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateMinBorrowFraction(uint256)'(_minBorrowFraction: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateNoOfRepaymentIntervalsLimit(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateNoOfRepaymentIntervalsLimit(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateNoStrategy(_noStrategy: string, overrides?: CallOverrides): Promise<void>;

    'updateNoStrategy(address)'(_noStrategy: string, overrides?: CallOverrides): Promise<void>;

    updatePoolCancelPenaltyMultiple(_poolCancelPenaltyMultiple: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updatePoolCancelPenaltyMultiple(uint256)'(_poolCancelPenaltyMultiple: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updatePoolSizeLimit(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updatePoolSizeLimit(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updatePriceoracle(_priceOracle: string, overrides?: CallOverrides): Promise<void>;

    'updatePriceoracle(address)'(_priceOracle: string, overrides?: CallOverrides): Promise<void>;

    updateProtocolFeeCollector(_protocolFeeCollector: string, overrides?: CallOverrides): Promise<void>;

    'updateProtocolFeeCollector(address)'(_protocolFeeCollector: string, overrides?: CallOverrides): Promise<void>;

    updateProtocolFeeFraction(_protocolFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateProtocolFeeFraction(uint256)'(_protocolFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateRepaymentImpl(_repaymentImpl: string, overrides?: CallOverrides): Promise<void>;

    'updateRepaymentImpl(address)'(_repaymentImpl: string, overrides?: CallOverrides): Promise<void>;

    updateRepaymentIntervalLimit(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateRepaymentIntervalLimit(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateSavingsAccount(_savingsAccount: string, overrides?: CallOverrides): Promise<void>;

    'updateSavingsAccount(address)'(_savingsAccount: string, overrides?: CallOverrides): Promise<void>;

    updateStrategyRegistry(_strategyRegistry: string, overrides?: CallOverrides): Promise<void>;

    'updateStrategyRegistry(address)'(_strategyRegistry: string, overrides?: CallOverrides): Promise<void>;

    updateSupportedBorrowTokens(_borrowToken: string, _isSupported: boolean, overrides?: CallOverrides): Promise<void>;

    'updateSupportedBorrowTokens(address,bool)'(_borrowToken: string, _isSupported: boolean, overrides?: CallOverrides): Promise<void>;

    updateSupportedCollateralTokens(_collateralToken: string, _isSupported: boolean, overrides?: CallOverrides): Promise<void>;

    'updateSupportedCollateralTokens(address,bool)'(
      _collateralToken: string,
      _isSupported: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUserRegistry(_userRegistry: string, overrides?: CallOverrides): Promise<void>;

    'updateUserRegistry(address)'(_userRegistry: string, overrides?: CallOverrides): Promise<void>;

    updateidealCollateralRatioLimit(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateidealCollateralRatioLimit(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    usdcAsset(overrides?: CallOverrides): Promise<string>;

    'usdcAsset()'(overrides?: CallOverrides): Promise<string>;

    userRegistry(overrides?: CallOverrides): Promise<string>;

    'userRegistry()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    BorrowTokenUpdated(
      borrowToken: string | null,
      isSupported: null
    ): TypedEventFilter<[string, boolean], { borrowToken: string; isSupported: boolean }>;

    CollateralTokenUpdated(
      collateralToken: string | null,
      isSupported: null
    ): TypedEventFilter<[string, boolean], { collateralToken: string; isSupported: boolean }>;

    CollectionPeriodUpdated(updatedCollectionPeriod: null): TypedEventFilter<[BigNumber], { updatedCollectionPeriod: BigNumber }>;

    LimitsUpdated(
      limitType: string | null,
      max: null,
      min: null
    ): TypedEventFilter<[string, BigNumber, BigNumber], { limitType: string; max: BigNumber; min: BigNumber }>;

    LiquidatorRewardFractionUpdated(
      updatedLiquidatorRewardFraction: null
    ): TypedEventFilter<[BigNumber], { updatedLiquidatorRewardFraction: BigNumber }>;

    LoanWithdrawalDurationUpdated(
      updatedLoanWithdrawalDuration: null
    ): TypedEventFilter<[BigNumber], { updatedLoanWithdrawalDuration: BigNumber }>;

    MarginCallDurationUpdated(updatedMarginCallDuration: null): TypedEventFilter<[BigNumber], { updatedMarginCallDuration: BigNumber }>;

    MinBorrowFractionUpdated(updatedMinBorrowFraction: null): TypedEventFilter<[BigNumber], { updatedMinBorrowFraction: BigNumber }>;

    NoStrategyUpdated(noStrategy: null): TypedEventFilter<[string], { noStrategy: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    PoolCancelPenaltyMultipleUpdated(
      updatedPoolCancelPenaltyMultiple: null
    ): TypedEventFilter<[BigNumber], { updatedPoolCancelPenaltyMultiple: BigNumber }>;

    PoolCreated(pool: string | null, borrower: string | null): TypedEventFilter<[string, string], { pool: string; borrower: string }>;

    PoolInitSelectorUpdated(updatedSelector: null): TypedEventFilter<[string], { updatedSelector: string }>;

    PoolLogicUpdated(updatedPoolLogic: string | null): TypedEventFilter<[string], { updatedPoolLogic: string }>;

    PriceOracleUpdated(updatedPriceOracle: string | null): TypedEventFilter<[string], { updatedPriceOracle: string }>;

    ProtocolFeeCollectorUpdated(updatedProtocolFeeCollector: null): TypedEventFilter<[string], { updatedProtocolFeeCollector: string }>;

    ProtocolFeeFractionUpdated(updatedProtocolFee: null): TypedEventFilter<[BigNumber], { updatedProtocolFee: BigNumber }>;

    RepaymentImplUpdated(updatedRepaymentImpl: string | null): TypedEventFilter<[string], { updatedRepaymentImpl: string }>;

    SavingsAccountUpdated(savingsAccount: string | null): TypedEventFilter<[string], { savingsAccount: string }>;

    StrategyRegistryUpdated(updatedStrategyRegistry: string | null): TypedEventFilter<[string], { updatedStrategyRegistry: string }>;

    UserRegistryUpdated(updatedBorrowerRegistry: string | null): TypedEventFilter<[string], { updatedBorrowerRegistry: string }>;
  };

  estimateGas: {
    beacon(overrides?: CallOverrides): Promise<BigNumber>;

    'beacon()'(overrides?: CallOverrides): Promise<BigNumber>;

    borrowRateLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'borrowRateLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    collectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      _poolSize: BigNumberish,
      _borrowRate: BigNumberish,
      _borrowToken: string,
      _collateralToken: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _salt: BytesLike,
      _borrowerVerifier: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'createPool(uint256,uint256,address,address,uint256,uint64,uint64,address,uint256,bool,bytes32,address,address)'(
      _poolSize: BigNumberish,
      _borrowRate: BigNumberish,
      _borrowToken: string,
      _collateralToken: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _salt: BytesLike,
      _borrowerVerifier: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<BigNumber>;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<BigNumber>;

    idealCollateralRatioLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'idealCollateralRatioLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _admin: string,
      _collectionPeriod: BigNumberish,
      _loanWithdrawalDuration: BigNumberish,
      _marginCallDuration: BigNumberish,
      _liquidatorRewardFraction: BigNumberish,
      _poolCancelPenaltyMultiple: BigNumberish,
      _minBorrowFraction: BigNumberish,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _noStrategy: string,
      _beacon: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address)'(
      _admin: string,
      _collectionPeriod: BigNumberish,
      _loanWithdrawalDuration: BigNumberish,
      _marginCallDuration: BigNumberish,
      _liquidatorRewardFraction: BigNumberish,
      _poolCancelPenaltyMultiple: BigNumberish,
      _minBorrowFraction: BigNumberish,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _noStrategy: string,
      _beacon: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isBorrowToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isBorrowToken(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isCollateralToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isCollateralToken(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    loanWithdrawalDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'loanWithdrawalDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    marginCallDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    minBorrowFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'minBorrowFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    noOfRepaymentIntervalsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'noOfRepaymentIntervalsLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    noStrategyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    'noStrategyAddress()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolCancelPenaltyMultiple(overrides?: CallOverrides): Promise<BigNumber>;

    'poolCancelPenaltyMultiple()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolRegistry(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'poolRegistry(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolSizeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'poolSizeLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    preComputeAddress(creator: string, salt: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'preComputeAddress(address,bytes32)'(creator: string, salt: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    'priceOracle()'(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    repaymentImpl(overrides?: CallOverrides): Promise<BigNumber>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<BigNumber>;

    repaymentIntervalLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'repaymentIntervalLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    savingsAccount(overrides?: CallOverrides): Promise<BigNumber>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<BigNumber>;

    setImplementations(
      _repaymentImpl: string,
      _userRegistry: string,
      _strategyRegistry: string,
      _priceOracle: string,
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setImplementations(address,address,address,address,address)'(
      _repaymentImpl: string,
      _userRegistry: string,
      _strategyRegistry: string,
      _priceOracle: string,
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    'strategyRegistry()'(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateBorrowRateLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateBorrowRateLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollectionPeriod(
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateCollectionPeriod(uint256)'(
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiquidatorRewardFraction(
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateLiquidatorRewardFraction(uint256)'(
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLoanWithdrawalDuration(
      _loanWithdrawalDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateLoanWithdrawalDuration(uint256)'(
      _loanWithdrawalDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarginCallDuration(
      _marginCallDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateMarginCallDuration(uint256)'(
      _marginCallDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinBorrowFraction(
      _minBorrowFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateMinBorrowFraction(uint256)'(
      _minBorrowFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNoOfRepaymentIntervalsLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateNoOfRepaymentIntervalsLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNoStrategy(_noStrategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateNoStrategy(address)'(_noStrategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updatePoolCancelPenaltyMultiple(
      _poolCancelPenaltyMultiple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updatePoolCancelPenaltyMultiple(uint256)'(
      _poolCancelPenaltyMultiple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolSizeLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updatePoolSizeLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriceoracle(_priceOracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updatePriceoracle(address)'(_priceOracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProtocolFeeFraction(_protocolFee: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRepaymentImpl(_repaymentImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateRepaymentImpl(address)'(_repaymentImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateRepaymentIntervalLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateRepaymentIntervalLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSavingsAccount(_savingsAccount: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateSavingsAccount(address)'(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStrategyRegistry(_strategyRegistry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateStrategyRegistry(address)'(
      _strategyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSupportedBorrowTokens(
      _borrowToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateSupportedBorrowTokens(address,bool)'(
      _borrowToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSupportedCollateralTokens(
      _collateralToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateSupportedCollateralTokens(address,bool)'(
      _collateralToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUserRegistry(_userRegistry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateUserRegistry(address)'(_userRegistry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateidealCollateralRatioLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateidealCollateralRatioLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdcAsset(overrides?: CallOverrides): Promise<BigNumber>;

    'usdcAsset()'(overrides?: CallOverrides): Promise<BigNumber>;

    userRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    'userRegistry()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    beacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'beacon()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowRateLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'borrowRateLimit()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPool(
      _poolSize: BigNumberish,
      _borrowRate: BigNumberish,
      _borrowToken: string,
      _collateralToken: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _salt: BytesLike,
      _borrowerVerifier: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'createPool(uint256,uint256,address,address,uint256,uint64,uint64,address,uint256,bool,bytes32,address,address)'(
      _poolSize: BigNumberish,
      _borrowRate: BigNumberish,
      _borrowToken: string,
      _collateralToken: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _salt: BytesLike,
      _borrowerVerifier: string,
      _lenderVerifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idealCollateralRatioLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'idealCollateralRatioLimit()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      _collectionPeriod: BigNumberish,
      _loanWithdrawalDuration: BigNumberish,
      _marginCallDuration: BigNumberish,
      _liquidatorRewardFraction: BigNumberish,
      _poolCancelPenaltyMultiple: BigNumberish,
      _minBorrowFraction: BigNumberish,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _noStrategy: string,
      _beacon: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address)'(
      _admin: string,
      _collectionPeriod: BigNumberish,
      _loanWithdrawalDuration: BigNumberish,
      _marginCallDuration: BigNumberish,
      _liquidatorRewardFraction: BigNumberish,
      _poolCancelPenaltyMultiple: BigNumberish,
      _minBorrowFraction: BigNumberish,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _noStrategy: string,
      _beacon: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isBorrowToken(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isBorrowToken(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCollateralToken(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isCollateralToken(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanWithdrawalDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'loanWithdrawalDuration()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marginCallDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBorrowFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'minBorrowFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    noOfRepaymentIntervalsLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'noOfRepaymentIntervalsLimit()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    noStrategyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'noStrategyAddress()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCancelPenaltyMultiple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolCancelPenaltyMultiple()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRegistry(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolRegistry(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolSizeLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolSizeLimit()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preComputeAddress(creator: string, salt: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'preComputeAddress(address,bytes32)'(creator: string, salt: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'priceOracle()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    repaymentImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repaymentIntervalLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'repaymentIntervalLimit()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    savingsAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setImplementations(
      _repaymentImpl: string,
      _userRegistry: string,
      _strategyRegistry: string,
      _priceOracle: string,
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setImplementations(address,address,address,address,address)'(
      _repaymentImpl: string,
      _userRegistry: string,
      _strategyRegistry: string,
      _priceOracle: string,
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'strategyRegistry()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBorrowRateLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateBorrowRateLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollectionPeriod(
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateCollectionPeriod(uint256)'(
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiquidatorRewardFraction(
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateLiquidatorRewardFraction(uint256)'(
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLoanWithdrawalDuration(
      _loanWithdrawalDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateLoanWithdrawalDuration(uint256)'(
      _loanWithdrawalDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarginCallDuration(
      _marginCallDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateMarginCallDuration(uint256)'(
      _marginCallDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinBorrowFraction(
      _minBorrowFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateMinBorrowFraction(uint256)'(
      _minBorrowFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNoOfRepaymentIntervalsLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateNoOfRepaymentIntervalsLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNoStrategy(_noStrategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'updateNoStrategy(address)'(
      _noStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolCancelPenaltyMultiple(
      _poolCancelPenaltyMultiple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updatePoolCancelPenaltyMultiple(uint256)'(
      _poolCancelPenaltyMultiple: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolSizeLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updatePoolSizeLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceoracle(_priceOracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'updatePriceoracle(address)'(
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolFeeFraction(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRepaymentImpl(_repaymentImpl: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'updateRepaymentImpl(address)'(
      _repaymentImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRepaymentIntervalLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateRepaymentIntervalLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSavingsAccount(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateSavingsAccount(address)'(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStrategyRegistry(
      _strategyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateStrategyRegistry(address)'(
      _strategyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSupportedBorrowTokens(
      _borrowToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateSupportedBorrowTokens(address,bool)'(
      _borrowToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSupportedCollateralTokens(
      _collateralToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateSupportedCollateralTokens(address,bool)'(
      _collateralToken: string,
      _isSupported: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUserRegistry(_userRegistry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'updateUserRegistry(address)'(
      _userRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateidealCollateralRatioLimit(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateidealCollateralRatioLimit(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdcAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'usdcAsset()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'userRegistry()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
