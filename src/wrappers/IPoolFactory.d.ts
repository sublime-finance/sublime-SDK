/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface IPoolFactoryInterface extends ethers.utils.Interface {
  functions: {
    'collectionPeriod()': FunctionFragment;
    'getProtocolFeeData()': FunctionFragment;
    'liquidatorRewardFraction()': FunctionFragment;
    'loanWithdrawalDuration()': FunctionFragment;
    'marginCallDuration()': FunctionFragment;
    'minBorrowFraction()': FunctionFragment;
    'noStrategyAddress()': FunctionFragment;
    'owner()': FunctionFragment;
    'poolCancelPenaltyMultiple()': FunctionFragment;
    'poolRegistry(address)': FunctionFragment;
    'priceOracle()': FunctionFragment;
    'repaymentImpl()': FunctionFragment;
    'savingsAccount()': FunctionFragment;
    'userRegistry()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'collectionPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getProtocolFeeData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidatorRewardFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'loanWithdrawalDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marginCallDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minBorrowFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'noStrategyAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolCancelPenaltyMultiple', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'priceOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repaymentImpl', values?: undefined): string;
  encodeFunctionData(functionFragment: 'savingsAccount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userRegistry', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'collectionPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProtocolFeeData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidatorRewardFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loanWithdrawalDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marginCallDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minBorrowFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'noStrategyAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolCancelPenaltyMultiple', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repaymentImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'savingsAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRegistry', data: BytesLike): Result;

  events: {
    'BorrowTokenUpdated(address,bool)': EventFragment;
    'CollateralTokenUpdated(address,bool)': EventFragment;
    'CollectionPeriodUpdated(uint256)': EventFragment;
    'LimitsUpdated(string,uint256,uint256)': EventFragment;
    'LiquidatorRewardFractionUpdated(uint256)': EventFragment;
    'LoanWithdrawalDurationUpdated(uint256)': EventFragment;
    'MarginCallDurationUpdated(uint256)': EventFragment;
    'MinBorrowFractionUpdated(uint256)': EventFragment;
    'NoStrategyUpdated(address)': EventFragment;
    'PoolCancelPenaltyMultipleUpdated(uint256)': EventFragment;
    'PoolCreated(address,address)': EventFragment;
    'PoolInitSelectorUpdated(bytes4)': EventFragment;
    'PoolLogicUpdated(address)': EventFragment;
    'PriceOracleUpdated(address)': EventFragment;
    'ProtocolFeeCollectorUpdated(address)': EventFragment;
    'ProtocolFeeFractionUpdated(uint256)': EventFragment;
    'RepaymentImplUpdated(address)': EventFragment;
    'SavingsAccountUpdated(address)': EventFragment;
    'StrategyRegistryUpdated(address)': EventFragment;
    'UserRegistryUpdated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BorrowTokenUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralTokenUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollectionPeriodUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LimitsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidatorRewardFractionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LoanWithdrawalDurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarginCallDurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinBorrowFractionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NoStrategyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolCancelPenaltyMultipleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolInitSelectorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolLogicUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PriceOracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeCollectorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeFractionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RepaymentImplUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SavingsAccountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyRegistryUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserRegistryUpdated'): EventFragment;
}

export class IPoolFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolFactoryInterface;

  functions: {
    collectionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<
      [BigNumber, string] & {
        protocolFeeFraction: BigNumber;
        protocolFeeCollector: string;
      }
    >;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<
      [BigNumber, string] & {
        protocolFeeFraction: BigNumber;
        protocolFeeCollector: string;
      }
    >;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    loanWithdrawalDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    'loanWithdrawalDuration()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    marginCallDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBorrowFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'minBorrowFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    noStrategyAddress(overrides?: CallOverrides): Promise<[string]>;

    'noStrategyAddress()'(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    poolCancelPenaltyMultiple(overrides?: CallOverrides): Promise<[BigNumber]>;

    'poolCancelPenaltyMultiple()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolRegistry(pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'poolRegistry(address)'(pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    'priceOracle()'(overrides?: CallOverrides): Promise<[string]>;

    repaymentImpl(overrides?: CallOverrides): Promise<[string]>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<[string]>;

    savingsAccount(overrides?: CallOverrides): Promise<[string]>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<[string]>;

    userRegistry(overrides?: CallOverrides): Promise<[string]>;

    'userRegistry()'(overrides?: CallOverrides): Promise<[string]>;
  };

  collectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  'collectionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolFeeData(overrides?: CallOverrides): Promise<
    [BigNumber, string] & {
      protocolFeeFraction: BigNumber;
      protocolFeeCollector: string;
    }
  >;

  'getProtocolFeeData()'(overrides?: CallOverrides): Promise<
    [BigNumber, string] & {
      protocolFeeFraction: BigNumber;
      protocolFeeCollector: string;
    }
  >;

  liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  loanWithdrawalDuration(overrides?: CallOverrides): Promise<BigNumber>;

  'loanWithdrawalDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

  marginCallDuration(overrides?: CallOverrides): Promise<BigNumber>;

  'marginCallDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

  minBorrowFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'minBorrowFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  noStrategyAddress(overrides?: CallOverrides): Promise<string>;

  'noStrategyAddress()'(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  poolCancelPenaltyMultiple(overrides?: CallOverrides): Promise<BigNumber>;

  'poolCancelPenaltyMultiple()'(overrides?: CallOverrides): Promise<BigNumber>;

  poolRegistry(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  'poolRegistry(address)'(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  'priceOracle()'(overrides?: CallOverrides): Promise<string>;

  repaymentImpl(overrides?: CallOverrides): Promise<string>;

  'repaymentImpl()'(overrides?: CallOverrides): Promise<string>;

  savingsAccount(overrides?: CallOverrides): Promise<string>;

  'savingsAccount()'(overrides?: CallOverrides): Promise<string>;

  userRegistry(overrides?: CallOverrides): Promise<string>;

  'userRegistry()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    collectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<
      [BigNumber, string] & {
        protocolFeeFraction: BigNumber;
        protocolFeeCollector: string;
      }
    >;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<
      [BigNumber, string] & {
        protocolFeeFraction: BigNumber;
        protocolFeeCollector: string;
      }
    >;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    loanWithdrawalDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'loanWithdrawalDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    marginCallDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    minBorrowFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'minBorrowFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    noStrategyAddress(overrides?: CallOverrides): Promise<string>;

    'noStrategyAddress()'(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    poolCancelPenaltyMultiple(overrides?: CallOverrides): Promise<BigNumber>;

    'poolCancelPenaltyMultiple()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolRegistry(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    'poolRegistry(address)'(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    'priceOracle()'(overrides?: CallOverrides): Promise<string>;

    repaymentImpl(overrides?: CallOverrides): Promise<string>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<string>;

    savingsAccount(overrides?: CallOverrides): Promise<string>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<string>;

    userRegistry(overrides?: CallOverrides): Promise<string>;

    'userRegistry()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    BorrowTokenUpdated(
      borrowToken: string | null,
      isSupported: null
    ): TypedEventFilter<[string, boolean], { borrowToken: string; isSupported: boolean }>;

    CollateralTokenUpdated(
      collateralToken: string | null,
      isSupported: null
    ): TypedEventFilter<[string, boolean], { collateralToken: string; isSupported: boolean }>;

    CollectionPeriodUpdated(updatedCollectionPeriod: null): TypedEventFilter<[BigNumber], { updatedCollectionPeriod: BigNumber }>;

    LimitsUpdated(
      limitType: string | null,
      max: null,
      min: null
    ): TypedEventFilter<[string, BigNumber, BigNumber], { limitType: string; max: BigNumber; min: BigNumber }>;

    LiquidatorRewardFractionUpdated(
      updatedLiquidatorRewardFraction: null
    ): TypedEventFilter<[BigNumber], { updatedLiquidatorRewardFraction: BigNumber }>;

    LoanWithdrawalDurationUpdated(
      updatedLoanWithdrawalDuration: null
    ): TypedEventFilter<[BigNumber], { updatedLoanWithdrawalDuration: BigNumber }>;

    MarginCallDurationUpdated(updatedMarginCallDuration: null): TypedEventFilter<[BigNumber], { updatedMarginCallDuration: BigNumber }>;

    MinBorrowFractionUpdated(updatedMinBorrowFraction: null): TypedEventFilter<[BigNumber], { updatedMinBorrowFraction: BigNumber }>;

    NoStrategyUpdated(noStrategy: null): TypedEventFilter<[string], { noStrategy: string }>;

    PoolCancelPenaltyMultipleUpdated(
      updatedPoolCancelPenaltyMultiple: null
    ): TypedEventFilter<[BigNumber], { updatedPoolCancelPenaltyMultiple: BigNumber }>;

    PoolCreated(pool: string | null, borrower: string | null): TypedEventFilter<[string, string], { pool: string; borrower: string }>;

    PoolInitSelectorUpdated(updatedSelector: null): TypedEventFilter<[string], { updatedSelector: string }>;

    PoolLogicUpdated(updatedPoolLogic: string | null): TypedEventFilter<[string], { updatedPoolLogic: string }>;

    PriceOracleUpdated(updatedPriceOracle: string | null): TypedEventFilter<[string], { updatedPriceOracle: string }>;

    ProtocolFeeCollectorUpdated(updatedProtocolFeeCollector: null): TypedEventFilter<[string], { updatedProtocolFeeCollector: string }>;

    ProtocolFeeFractionUpdated(updatedProtocolFee: null): TypedEventFilter<[BigNumber], { updatedProtocolFee: BigNumber }>;

    RepaymentImplUpdated(updatedRepaymentImpl: string | null): TypedEventFilter<[string], { updatedRepaymentImpl: string }>;

    SavingsAccountUpdated(savingsAccount: string | null): TypedEventFilter<[string], { savingsAccount: string }>;

    StrategyRegistryUpdated(updatedStrategyRegistry: string | null): TypedEventFilter<[string], { updatedStrategyRegistry: string }>;

    UserRegistryUpdated(updatedBorrowerRegistry: string | null): TypedEventFilter<[string], { updatedBorrowerRegistry: string }>;
  };

  estimateGas: {
    collectionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<BigNumber>;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    loanWithdrawalDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'loanWithdrawalDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    marginCallDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<BigNumber>;

    minBorrowFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'minBorrowFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    noStrategyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    'noStrategyAddress()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolCancelPenaltyMultiple(overrides?: CallOverrides): Promise<BigNumber>;

    'poolCancelPenaltyMultiple()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolRegistry(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    'poolRegistry(address)'(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    'priceOracle()'(overrides?: CallOverrides): Promise<BigNumber>;

    repaymentImpl(overrides?: CallOverrides): Promise<BigNumber>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<BigNumber>;

    savingsAccount(overrides?: CallOverrides): Promise<BigNumber>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<BigNumber>;

    userRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    'userRegistry()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collectionPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'collectionPeriod()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolFeeData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getProtocolFeeData()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanWithdrawalDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'loanWithdrawalDuration()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marginCallDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'marginCallDuration()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBorrowFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'minBorrowFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    noStrategyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'noStrategyAddress()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCancelPenaltyMultiple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolCancelPenaltyMultiple()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRegistry(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolRegistry(address)'(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'priceOracle()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repaymentImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'repaymentImpl()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    savingsAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'savingsAccount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'userRegistry()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
