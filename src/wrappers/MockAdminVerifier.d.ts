/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface MockAdminVerifierInterface extends ethers.utils.Interface {
  functions: {
    'initialize(address,address,string,string)': FunctionFragment;
    'owner()': FunctionFragment;
    'registerSelf()': FunctionFragment;
    'registerUserViaOwner(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unregisterSelf()': FunctionFragment;
    'unregisterUser(address)': FunctionFragment;
    'updateVerification(address)': FunctionFragment;
    'verification()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string, string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'registerSelf', values?: undefined): string;
  encodeFunctionData(functionFragment: 'registerUserViaOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unregisterSelf', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unregisterUser', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateVerification', values: [string]): string;
  encodeFunctionData(functionFragment: 'verification', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerSelf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerUserViaOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unregisterSelf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unregisterUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateVerification', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verification', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
    'SignerUpdated(address)': EventFragment;
    'UserRegistered(address,bool,string)': EventFragment;
    'UserUnregistered(address)': EventFragment;
    'VerificationUpdated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SignerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserRegistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserUnregistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VerificationUpdated'): EventFragment;
}

export class MockAdminVerifier extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockAdminVerifierInterface;

  functions: {
    initialize(
      _admin: string,
      _verification: string,
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(address,address,string,string)'(
      _admin: string,
      _verification: string,
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    registerSelf(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'registerSelf()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    registerUserViaOwner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'registerUserViaOwner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterSelf(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'unregisterSelf()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    unregisterUser(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'unregisterUser(address)'(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    updateVerification(_verification: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'updateVerification(address)'(
      _verification: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verification(overrides?: CallOverrides): Promise<[string]>;

    'verification()'(overrides?: CallOverrides): Promise<[string]>;
  };

  initialize(
    _admin: string,
    _verification: string,
    _name: string,
    _version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(address,address,string,string)'(
    _admin: string,
    _verification: string,
    _name: string,
    _version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  registerSelf(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'registerSelf()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  registerUserViaOwner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'registerUserViaOwner(address)'(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  unregisterSelf(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'unregisterSelf()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  unregisterUser(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'unregisterUser(address)'(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  updateVerification(_verification: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'updateVerification(address)'(
    _verification: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verification(overrides?: CallOverrides): Promise<string>;

  'verification()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    initialize(_admin: string, _verification: string, _name: string, _version: string, overrides?: CallOverrides): Promise<void>;

    'initialize(address,address,string,string)'(
      _admin: string,
      _verification: string,
      _name: string,
      _version: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    registerSelf(overrides?: CallOverrides): Promise<void>;

    'registerSelf()'(overrides?: CallOverrides): Promise<void>;

    registerUserViaOwner(_user: string, overrides?: CallOverrides): Promise<void>;

    'registerUserViaOwner(address)'(_user: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unregisterSelf(overrides?: CallOverrides): Promise<void>;

    'unregisterSelf()'(overrides?: CallOverrides): Promise<void>;

    unregisterUser(_user: string, overrides?: CallOverrides): Promise<void>;

    'unregisterUser(address)'(_user: string, overrides?: CallOverrides): Promise<void>;

    updateVerification(_verification: string, overrides?: CallOverrides): Promise<void>;

    'updateVerification(address)'(_verification: string, overrides?: CallOverrides): Promise<void>;

    verification(overrides?: CallOverrides): Promise<string>;

    'verification()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    SignerUpdated(signerAddress: string | null): TypedEventFilter<[string], { signerAddress: string }>;

    UserRegistered(
      user: string | null,
      isMasterLinked: null,
      metadata: string | null
    ): TypedEventFilter<[string, boolean, string], { user: string; isMasterLinked: boolean; metadata: string }>;

    UserUnregistered(user: string | null): TypedEventFilter<[string], { user: string }>;

    VerificationUpdated(verification: string | null): TypedEventFilter<[string], { verification: string }>;
  };

  estimateGas: {
    initialize(
      _admin: string,
      _verification: string,
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(address,address,string,string)'(
      _admin: string,
      _verification: string,
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    registerSelf(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'registerSelf()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    registerUserViaOwner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'registerUserViaOwner(address)'(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    unregisterSelf(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'unregisterSelf()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    unregisterUser(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'unregisterUser(address)'(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateVerification(_verification: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateVerification(address)'(_verification: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    verification(overrides?: CallOverrides): Promise<BigNumber>;

    'verification()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      _admin: string,
      _verification: string,
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(address,address,string,string)'(
      _admin: string,
      _verification: string,
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerSelf(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'registerSelf()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    registerUserViaOwner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'registerUserViaOwner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterSelf(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'unregisterSelf()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    unregisterUser(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'unregisterUser(address)'(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    updateVerification(_verification: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'updateVerification(address)'(
      _verification: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verification(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'verification()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
