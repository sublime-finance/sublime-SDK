/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface ISavingsAccountInterface extends ethers.utils.Interface {
  functions: {
    'allowance(address,address,address)': FunctionFragment;
    'approve(address,address,uint256)': FunctionFragment;
    'balanceInShares(address,address,address)': FunctionFragment;
    'decreaseAllowance(address,address,uint256)': FunctionFragment;
    'deposit(address,address,address,uint256)': FunctionFragment;
    'getTotalTokens(address,address)': FunctionFragment;
    'increaseAllowance(address,address,uint256)': FunctionFragment;
    'switchStrategy(address,address,address,uint256)': FunctionFragment;
    'transfer(address,address,address,uint256)': FunctionFragment;
    'transferFrom(address,address,address,address,uint256)': FunctionFragment;
    'transferShares(address,address,address,uint256)': FunctionFragment;
    'transferSharesFrom(address,address,address,address,uint256)': FunctionFragment;
    'withdraw(address,address,address,uint256,bool)': FunctionFragment;
    'withdrawAll(address,address)': FunctionFragment;
    'withdrawFrom(address,address,address,address,uint256,bool)': FunctionFragment;
    'withdrawShares(address,address,address,uint256,bool)': FunctionFragment;
    'withdrawSharesFrom(address,address,address,address,uint256,bool)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'allowance', values: [string, string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceInShares', values: [string, string, string]): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [string, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getTotalTokens', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'switchStrategy', values: [string, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferShares', values: [string, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferSharesFrom', values: [string, string, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [string, string, string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'withdrawFrom', values: [string, string, string, string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'withdrawShares', values: [string, string, string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'withdrawSharesFrom', values: [string, string, string, string, BigNumberish, boolean]): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceInShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'switchStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferSharesFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawSharesFrom', data: BytesLike): Result;

  events: {
    'Approved(address,address,address,uint256)': EventFragment;
    'Deposited(address,uint256,address,address)': EventFragment;
    'StrategyRegistryUpdated(address)': EventFragment;
    'StrategySwitched(address,address,uint256,uint256,address,address)': EventFragment;
    'Transfer(address,address,address,address,uint256)': EventFragment;
    'TransferShares(address,address,address,address,uint256)': EventFragment;
    'Withdrawn(address,address,uint256,address,address,bool)': EventFragment;
    'WithdrawnAll(address,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyRegistryUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategySwitched'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferShares'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawnAll'): EventFragment;
}

export class ISavingsAccount extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISavingsAccountInterface;

  functions: {
    allowance(
      user: string,
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'allowance(address,address,address)'(
      user: string,
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'approve(address,address,uint256)'(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceInShares(
      user: string,
      token: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shareBalance: BigNumber }>;

    'balanceInShares(address,address,address)'(
      user: string,
      token: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shareBalance: BigNumber }>;

    decreaseAllowance(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'decreaseAllowance(address,address,uint256)'(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'deposit(address,address,address,uint256)'(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalTokens(
      _user: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'getTotalTokens(address,address)'(
      _user: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'increaseAllowance(address,address,uint256)'(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    switchStrategy(
      currentStrategy: string,
      newStrategy: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'switchStrategy(address,address,address,uint256)'(
      currentStrategy: string,
      newStrategy: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'transfer(address,address,address,uint256)'(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'transferFrom(address,address,address,address,uint256)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferShares(
      _token: string,
      _strategy: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'transferShares(address,address,address,uint256)'(
      _token: string,
      _strategy: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferSharesFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'transferSharesFrom(address,address,address,address,uint256)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      strategy: string,
      withdrawTo: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdraw(address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      withdrawTo: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawAll(address,address)'(
      token: string,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawAll(address)'(token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawFrom(address,address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawShares(
      token: string,
      strategy: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawShares(address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSharesFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawSharesFrom(address,address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    user: string,
    token: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'allowance(address,address,address)'(
    user: string,
    token: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'approve(address,address,uint256)'(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceInShares(user: string, token: string, strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceInShares(address,address,address)'(user: string, token: string, strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

  decreaseAllowance(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'decreaseAllowance(address,address,uint256)'(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    token: string,
    strategy: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'deposit(address,address,address,uint256)'(
    token: string,
    strategy: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalTokens(_user: string, _token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'getTotalTokens(address,address)'(
    _user: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'increaseAllowance(address,address,uint256)'(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  switchStrategy(
    currentStrategy: string,
    newStrategy: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'switchStrategy(address,address,address,uint256)'(
    currentStrategy: string,
    newStrategy: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    token: string,
    strategy: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'transfer(address,address,address,uint256)'(
    token: string,
    strategy: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    token: string,
    strategy: string,
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'transferFrom(address,address,address,address,uint256)'(
    token: string,
    strategy: string,
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferShares(
    _token: string,
    _strategy: string,
    _to: string,
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'transferShares(address,address,address,uint256)'(
    _token: string,
    _strategy: string,
    _to: string,
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferSharesFrom(
    token: string,
    strategy: string,
    from: string,
    to: string,
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'transferSharesFrom(address,address,address,address,uint256)'(
    token: string,
    strategy: string,
    from: string,
    to: string,
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    strategy: string,
    withdrawTo: string,
    amount: BigNumberish,
    receiveShares: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdraw(address,address,address,uint256,bool)'(
    token: string,
    strategy: string,
    withdrawTo: string,
    amount: BigNumberish,
    receiveShares: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawAll(address,address)'(
    token: string,
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawAll(address)'(token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawFrom(
    token: string,
    strategy: string,
    from: string,
    to: string,
    amount: BigNumberish,
    receiveShares: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawFrom(address,address,address,address,uint256,bool)'(
    token: string,
    strategy: string,
    from: string,
    to: string,
    amount: BigNumberish,
    receiveShares: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawShares(
    token: string,
    strategy: string,
    to: string,
    shares: BigNumberish,
    receiveShares: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawShares(address,address,address,uint256,bool)'(
    token: string,
    strategy: string,
    to: string,
    shares: BigNumberish,
    receiveShares: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSharesFrom(
    token: string,
    strategy: string,
    from: string,
    to: string,
    shares: BigNumberish,
    receiveShares: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawSharesFrom(address,address,address,address,uint256,bool)'(
    token: string,
    strategy: string,
    from: string,
    to: string,
    shares: BigNumberish,
    receiveShares: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(user: string, token: string, to: string, overrides?: CallOverrides): Promise<BigNumber>;

    'allowance(address,address,address)'(user: string, token: string, to: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(token: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'approve(address,address,uint256)'(token: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    balanceInShares(user: string, token: string, strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceInShares(address,address,address)'(
      user: string,
      token: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseAllowance(token: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'decreaseAllowance(address,address,uint256)'(token: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    deposit(token: string, strategy: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(address,address,address,uint256)'(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokens(_user: string, _token: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getTotalTokens(address,address)'(_user: string, _token: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(token: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'increaseAllowance(address,address,uint256)'(token: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    switchStrategy(
      currentStrategy: string,
      newStrategy: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'switchStrategy(address,address,address,uint256)'(
      currentStrategy: string,
      newStrategy: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(token: string, strategy: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'transfer(address,address,address,uint256)'(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'transferFrom(address,address,address,address,uint256)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferShares(_token: string, _strategy: string, _to: string, _shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'transferShares(address,address,address,uint256)'(
      _token: string,
      _strategy: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferSharesFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'transferSharesFrom(address,address,address,address,uint256)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      strategy: string,
      withdrawTo: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'withdraw(address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      withdrawTo: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'withdrawAll(address,address)'(token: string, strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

    'withdrawAll(address)'(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'withdrawFrom(address,address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawShares(
      token: string,
      strategy: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'withdrawShares(address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawSharesFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'withdrawSharesFrom(address,address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approved(
      token: string | null,
      from: string | null,
      to: string | null,
      amount: null
    ): TypedEventFilter<[string, string, string, BigNumber], { token: string; from: string; to: string; amount: BigNumber }>;

    Deposited(
      user: string | null,
      sharesReceived: null,
      token: string | null,
      strategy: string | null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        user: string;
        sharesReceived: BigNumber;
        token: string;
        strategy: string;
      }
    >;

    StrategyRegistryUpdated(updatedStrategyRegistry: string | null): TypedEventFilter<[string], { updatedStrategyRegistry: string }>;

    StrategySwitched(
      user: string | null,
      token: string | null,
      sharesDecreasedInCurrentStrategy: null,
      sharesIncreasedInNewStrategy: null,
      currentStrategy: null,
      newStrategy: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string],
      {
        user: string;
        token: string;
        sharesDecreasedInCurrentStrategy: BigNumber;
        sharesIncreasedInNewStrategy: BigNumber;
        currentStrategy: string;
        newStrategy: string;
      }
    >;

    Transfer(
      token: string | null,
      strategy: null,
      from: string | null,
      to: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        token: string;
        strategy: string;
        from: string;
        to: string;
        amount: BigNumber;
      }
    >;

    TransferShares(
      token: string | null,
      strategy: null,
      from: string | null,
      to: string | null,
      shares: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        token: string;
        strategy: string;
        from: string;
        to: string;
        shares: BigNumber;
      }
    >;

    Withdrawn(
      from: string | null,
      to: string | null,
      sharesWithdrawn: null,
      token: string | null,
      strategy: null,
      receiveShares: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, boolean],
      {
        from: string;
        to: string;
        sharesWithdrawn: BigNumber;
        token: string;
        strategy: string;
        receiveShares: boolean;
      }
    >;

    WithdrawnAll(
      user: string | null,
      tokenReceived: null,
      token: string | null
    ): TypedEventFilter<[string, BigNumber, string], { user: string; tokenReceived: BigNumber; token: string }>;
  };

  estimateGas: {
    allowance(user: string, token: string, to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'allowance(address,address,address)'(
      user: string,
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'approve(address,address,uint256)'(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceInShares(user: string, token: string, strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceInShares(address,address,address)'(
      user: string,
      token: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseAllowance(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'decreaseAllowance(address,address,uint256)'(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'deposit(address,address,address,uint256)'(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalTokens(_user: string, _token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'getTotalTokens(address,address)'(
      _user: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'increaseAllowance(address,address,uint256)'(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    switchStrategy(
      currentStrategy: string,
      newStrategy: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'switchStrategy(address,address,address,uint256)'(
      currentStrategy: string,
      newStrategy: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'transfer(address,address,address,uint256)'(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'transferFrom(address,address,address,address,uint256)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferShares(
      _token: string,
      _strategy: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'transferShares(address,address,address,uint256)'(
      _token: string,
      _strategy: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferSharesFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'transferSharesFrom(address,address,address,address,uint256)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      strategy: string,
      withdrawTo: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdraw(address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      withdrawTo: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawAll(address,address)'(
      token: string,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawAll(address)'(token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawFrom(address,address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawShares(
      token: string,
      strategy: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawShares(address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSharesFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawSharesFrom(address,address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      user: string,
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'allowance(address,address,address)'(
      user: string,
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'approve(address,address,uint256)'(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceInShares(user: string, token: string, strategy: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'balanceInShares(address,address,address)'(
      user: string,
      token: string,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'decreaseAllowance(address,address,uint256)'(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'deposit(address,address,address,uint256)'(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalTokens(
      _user: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'getTotalTokens(address,address)'(
      _user: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'increaseAllowance(address,address,uint256)'(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    switchStrategy(
      currentStrategy: string,
      newStrategy: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'switchStrategy(address,address,address,uint256)'(
      currentStrategy: string,
      newStrategy: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'transfer(address,address,address,uint256)'(
      token: string,
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'transferFrom(address,address,address,address,uint256)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferShares(
      _token: string,
      _strategy: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'transferShares(address,address,address,uint256)'(
      _token: string,
      _strategy: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferSharesFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'transferSharesFrom(address,address,address,address,uint256)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      strategy: string,
      withdrawTo: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdraw(address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      withdrawTo: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawAll(address,address)'(
      token: string,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawAll(address)'(token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawFrom(address,address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      amount: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawShares(
      token: string,
      strategy: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawShares(address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSharesFrom(
      token: string,
      strategy: string,
      from: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawSharesFrom(address,address,address,address,uint256,bool)'(
      token: string,
      strategy: string,
      from: string,
      to: string,
      shares: BigNumberish,
      receiveShares: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
