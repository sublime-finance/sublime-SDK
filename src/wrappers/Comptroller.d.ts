/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface ComptrollerInterface extends ethers.utils.Interface {
  functions: {
    'claimComp(address[],address[],bool,bool)': FunctionFragment;
    'compSpeeds(address)': FunctionFragment;
    'compSupplySpeeds(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'claimComp', values: [string[], string[], boolean, boolean]): string;
  encodeFunctionData(functionFragment: 'compSpeeds', values: [string]): string;
  encodeFunctionData(functionFragment: 'compSupplySpeeds', values: [string]): string;

  decodeFunctionResult(functionFragment: 'claimComp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'compSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'compSupplySpeeds', data: BytesLike): Result;

  events: {};
}

export class Comptroller extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ComptrollerInterface;

  functions: {
    'claimComp(address[],address[],bool,bool)'(
      holders: string[],
      cTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'claimComp(address)'(arg0: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    compSpeeds(_cToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'compSpeeds(address)'(_cToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    compSupplySpeeds(_cToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'compSupplySpeeds(address)'(_cToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  'claimComp(address[],address[],bool,bool)'(
    holders: string[],
    cTokens: string[],
    borrowers: boolean,
    suppliers: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'claimComp(address)'(arg0: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  compSpeeds(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  'compSpeeds(address)'(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  compSupplySpeeds(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  'compSupplySpeeds(address)'(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    'claimComp(address[],address[],bool,bool)'(
      holders: string[],
      cTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'claimComp(address)'(arg0: string, overrides?: CallOverrides): Promise<void>;

    compSpeeds(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'compSpeeds(address)'(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    compSupplySpeeds(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'compSupplySpeeds(address)'(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    'claimComp(address[],address[],bool,bool)'(
      holders: string[],
      cTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'claimComp(address)'(arg0: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    compSpeeds(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'compSpeeds(address)'(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    compSupplySpeeds(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'compSupplySpeeds(address)'(_cToken: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    'claimComp(address[],address[],bool,bool)'(
      holders: string[],
      cTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'claimComp(address)'(arg0: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    compSpeeds(_cToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'compSpeeds(address)'(_cToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compSupplySpeeds(_cToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'compSupplySpeeds(address)'(_cToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
