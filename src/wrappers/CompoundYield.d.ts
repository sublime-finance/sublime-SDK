/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface CompoundYieldInterface extends ethers.utils.Interface {
  functions: {
    'SAVINGS_ACCOUNT()': FunctionFragment;
    'TREASURY()': FunctionFragment;
    'WETH()': FunctionFragment;
    'addTokenAddress(address,address)': FunctionFragment;
    'claimCompTokens(address,address)': FunctionFragment;
    'depositLimit(address)': FunctionFragment;
    'emergencyWithdraw(address,address)': FunctionFragment;
    'forceUpdateTokenAddress(address,address)': FunctionFragment;
    'getSharesForTokens(uint256,address)': FunctionFragment;
    'getTokensForShares(uint256,address)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'liquidityToken(address)': FunctionFragment;
    'lockTokens(address,address,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'removeTokenAddress(address,address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setDepositLimit(address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unlockShares(address,address,uint256)': FunctionFragment;
    'unlockTokens(address,address,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'SAVINGS_ACCOUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'TREASURY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WETH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addTokenAddress', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'claimCompTokens', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'depositLimit', values: [string]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'forceUpdateTokenAddress', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getSharesForTokens', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'getTokensForShares', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string;
  encodeFunctionData(functionFragment: 'liquidityToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'lockTokens', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeTokenAddress', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setDepositLimit', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unlockShares', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'unlockTokens', values: [string, string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'SAVINGS_ACCOUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TREASURY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addTokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimCompTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forceUpdateTokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSharesForTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokensForShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeTokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockTokens', data: BytesLike): Result;

  events: {
    'EmergencyWithdraw(address,address,uint256)': EventFragment;
    'LockedTokens(address,address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SavingsAccountUpdated(address)': EventFragment;
    'TokenAddressesUpdated(address,address)': EventFragment;
    'UnlockedShares(address,uint256)': EventFragment;
    'UnlockedTokens(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LockedTokens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SavingsAccountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenAddressesUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnlockedShares'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnlockedTokens'): EventFragment;
}

export class CompoundYield extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CompoundYieldInterface;

  functions: {
    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<[string]>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<[string]>;

    TREASURY(overrides?: CallOverrides): Promise<[string]>;

    'TREASURY()'(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    'WETH()'(overrides?: CallOverrides): Promise<[string]>;

    addTokenAddress(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'addTokenAddress(address,address)'(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCompTokens(
      _comptroller: string,
      _compToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'claimCompTokens(address,address)'(
      _comptroller: string,
      _compToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositLimit(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'depositLimit(address)'(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(
      _asset: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'emergencyWithdraw(address,address)'(
      _asset: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceUpdateTokenAddress(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'forceUpdateTokenAddress(address,address)'(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSharesForTokens(
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'getSharesForTokens(uint256,address)'(
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokensForShares(
      _shares: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'getTokensForShares(uint256,address)'(
      _shares: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'initialize(address)'(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    liquidityToken(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    'liquidityToken(address)'(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    lockTokens(
      _user: string,
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'lockTokens(address,address,uint256)'(
      _user: string,
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    removeTokenAddress(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'removeTokenAddress(address,address)'(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setDepositLimit(
      _asset: string,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setDepositLimit(address,uint256)'(
      _asset: string,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockShares(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'unlockShares(address,address,uint256)'(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockTokens(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'unlockTokens(address,address,uint256)'(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<string>;

  'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<string>;

  TREASURY(overrides?: CallOverrides): Promise<string>;

  'TREASURY()'(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  'WETH()'(overrides?: CallOverrides): Promise<string>;

  addTokenAddress(
    _asset: string,
    _liquidityToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'addTokenAddress(address,address)'(
    _asset: string,
    _liquidityToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCompTokens(
    _comptroller: string,
    _compToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'claimCompTokens(address,address)'(
    _comptroller: string,
    _compToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositLimit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'depositLimit(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    _asset: string,
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'emergencyWithdraw(address,address)'(
    _asset: string,
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceUpdateTokenAddress(
    _asset: string,
    _liquidityToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'forceUpdateTokenAddress(address,address)'(
    _asset: string,
    _liquidityToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSharesForTokens(
    _amount: BigNumberish,
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'getSharesForTokens(uint256,address)'(
    _amount: BigNumberish,
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokensForShares(
    _shares: BigNumberish,
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'getTokensForShares(uint256,address)'(
    _shares: BigNumberish,
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'initialize(address)'(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  liquidityToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  'liquidityToken(address)'(arg0: string, overrides?: CallOverrides): Promise<string>;

  lockTokens(
    _user: string,
    _asset: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'lockTokens(address,address,uint256)'(
    _user: string,
    _asset: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  removeTokenAddress(
    _asset: string,
    _liquidityToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'removeTokenAddress(address,address)'(
    _asset: string,
    _liquidityToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setDepositLimit(
    _asset: string,
    _limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setDepositLimit(address,uint256)'(
    _asset: string,
    _limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  unlockShares(
    _asset: string,
    _to: string,
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'unlockShares(address,address,uint256)'(
    _asset: string,
    _to: string,
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockTokens(
    _asset: string,
    _to: string,
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'unlockTokens(address,address,uint256)'(
    _asset: string,
    _to: string,
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<string>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<string>;

    TREASURY(overrides?: CallOverrides): Promise<string>;

    'TREASURY()'(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    'WETH()'(overrides?: CallOverrides): Promise<string>;

    addTokenAddress(_asset: string, _liquidityToken: string, overrides?: CallOverrides): Promise<void>;

    'addTokenAddress(address,address)'(_asset: string, _liquidityToken: string, overrides?: CallOverrides): Promise<void>;

    claimCompTokens(_comptroller: string, _compToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claimCompTokens(address,address)'(_comptroller: string, _compToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositLimit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'depositLimit(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(_asset: string, _wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    'emergencyWithdraw(address,address)'(_asset: string, _wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    forceUpdateTokenAddress(_asset: string, _liquidityToken: string, overrides?: CallOverrides): Promise<void>;

    'forceUpdateTokenAddress(address,address)'(_asset: string, _liquidityToken: string, overrides?: CallOverrides): Promise<void>;

    getSharesForTokens(_amount: BigNumberish, _asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getSharesForTokens(uint256,address)'(_amount: BigNumberish, _asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensForShares(_shares: BigNumberish, _asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getTokensForShares(uint256,address)'(_shares: BigNumberish, _asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_owner: string, overrides?: CallOverrides): Promise<void>;

    'initialize(address)'(_owner: string, overrides?: CallOverrides): Promise<void>;

    liquidityToken(arg0: string, overrides?: CallOverrides): Promise<string>;

    'liquidityToken(address)'(arg0: string, overrides?: CallOverrides): Promise<string>;

    lockTokens(_user: string, _asset: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'lockTokens(address,address,uint256)'(
      _user: string,
      _asset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    removeTokenAddress(_asset: string, _liquidityToken: string, overrides?: CallOverrides): Promise<void>;

    'removeTokenAddress(address,address)'(_asset: string, _liquidityToken: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    setDepositLimit(_asset: string, _limit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'setDepositLimit(address,uint256)'(_asset: string, _limit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unlockShares(_asset: string, _to: string, _shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'unlockShares(address,address,uint256)'(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockTokens(_asset: string, _to: string, _shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'unlockTokens(address,address,uint256)'(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    EmergencyWithdraw(
      asset: string | null,
      withdrawTo: string | null,
      tokensReceived: null
    ): TypedEventFilter<[string, string, BigNumber], { asset: string; withdrawTo: string; tokensReceived: BigNumber }>;

    LockedTokens(
      user: string | null,
      investedTo: string | null,
      lpTokensReceived: null
    ): TypedEventFilter<[string, string, BigNumber], { user: string; investedTo: string; lpTokensReceived: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    SavingsAccountUpdated(savingsAccount: string | null): TypedEventFilter<[string], { savingsAccount: string }>;

    TokenAddressesUpdated(
      asset: string | null,
      protocolToken: string | null
    ): TypedEventFilter<[string, string], { asset: string; protocolToken: string }>;

    UnlockedShares(
      asset: string | null,
      sharesReleased: null
    ): TypedEventFilter<[string, BigNumber], { asset: string; sharesReleased: BigNumber }>;

    UnlockedTokens(
      investedTo: string | null,
      collateralReceived: null
    ): TypedEventFilter<[string, BigNumber], { investedTo: string; collateralReceived: BigNumber }>;
  };

  estimateGas: {
    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURY(overrides?: CallOverrides): Promise<BigNumber>;

    'TREASURY()'(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    'WETH()'(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenAddress(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'addTokenAddress(address,address)'(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCompTokens(
      _comptroller: string,
      _compToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'claimCompTokens(address,address)'(
      _comptroller: string,
      _compToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositLimit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'depositLimit(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(_asset: string, _wallet: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'emergencyWithdraw(address,address)'(
      _asset: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceUpdateTokenAddress(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'forceUpdateTokenAddress(address,address)'(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSharesForTokens(
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'getSharesForTokens(uint256,address)'(
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokensForShares(
      _shares: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'getTokensForShares(uint256,address)'(
      _shares: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'initialize(address)'(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    liquidityToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'liquidityToken(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockTokens(
      _user: string,
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'lockTokens(address,address,uint256)'(
      _user: string,
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    removeTokenAddress(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'removeTokenAddress(address,address)'(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setDepositLimit(_asset: string, _limit: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setDepositLimit(address,uint256)'(
      _asset: string,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    unlockShares(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'unlockShares(address,address,uint256)'(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockTokens(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'unlockTokens(address,address,uint256)'(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TREASURY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'TREASURY()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'WETH()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokenAddress(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'addTokenAddress(address,address)'(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCompTokens(
      _comptroller: string,
      _compToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'claimCompTokens(address,address)'(
      _comptroller: string,
      _compToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositLimit(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'depositLimit(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _asset: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'emergencyWithdraw(address,address)'(
      _asset: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceUpdateTokenAddress(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'forceUpdateTokenAddress(address,address)'(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSharesForTokens(
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'getSharesForTokens(uint256,address)'(
      _amount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokensForShares(
      _shares: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'getTokensForShares(uint256,address)'(
      _shares: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'initialize(address)'(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    liquidityToken(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'liquidityToken(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockTokens(
      _user: string,
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'lockTokens(address,address,uint256)'(
      _user: string,
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTokenAddress(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'removeTokenAddress(address,address)'(
      _asset: string,
      _liquidityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setDepositLimit(
      _asset: string,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setDepositLimit(address,uint256)'(
      _asset: string,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockShares(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'unlockShares(address,address,uint256)'(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockTokens(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'unlockTokens(address,address,uint256)'(
      _asset: string,
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
