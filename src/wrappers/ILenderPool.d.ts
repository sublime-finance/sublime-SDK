/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface ILenderPoolInterface extends ethers.utils.Interface {
  functions: {
    'borrowed(uint256,uint256)': FunctionFragment;
    'create(uint256,address,address,address,uint256,uint256,uint256,bool)': FunctionFragment;
    'repaid(uint256,uint256,uint256)': FunctionFragment;
    'requestCancelled(uint256)': FunctionFragment;
    'start(uint256)': FunctionFragment;
    'terminate(uint256,address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'borrowed', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'create',
    values: [BigNumberish, string, string, string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: 'repaid', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'requestCancelled', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'start', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'terminate', values: [BigNumberish, string]): string;

  decodeFunctionResult(functionFragment: 'borrowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'create', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestCancelled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'start', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'terminate', data: BytesLike): Result;

  events: {
    'LiquidityWithdrawn(uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'LiquidityWithdrawn'): EventFragment;
}

export class ILenderPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILenderPoolInterface;

  functions: {
    borrowed(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'borrowed(uint256,uint256)'(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _minBorrowAmount: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'create(uint256,address,address,address,uint256,uint256,uint256,bool)'(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _minBorrowAmount: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repaid(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'repaid(uint256,uint256,uint256)'(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestCancelled(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'requestCancelled(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'start(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    terminate(id: BigNumberish, to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'terminate(uint256,address)'(
      id: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrowed(
    _id: BigNumberish,
    _sharesBorrowed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'borrowed(uint256,uint256)'(
    _id: BigNumberish,
    _sharesBorrowed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create(
    _id: BigNumberish,
    _verifier: string,
    _token: string,
    _strategy: string,
    _borrowLimit: BigNumberish,
    _minBorrowAmount: BigNumberish,
    _collectionPeriod: BigNumberish,
    _areTokensTransferable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'create(uint256,address,address,address,uint256,uint256,uint256,bool)'(
    _id: BigNumberish,
    _verifier: string,
    _token: string,
    _strategy: string,
    _borrowLimit: BigNumberish,
    _minBorrowAmount: BigNumberish,
    _collectionPeriod: BigNumberish,
    _areTokensTransferable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repaid(
    _id: BigNumberish,
    _sharesRepaid: BigNumberish,
    _interestShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'repaid(uint256,uint256,uint256)'(
    _id: BigNumberish,
    _sharesRepaid: BigNumberish,
    _interestShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestCancelled(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'requestCancelled(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  start(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'start(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  terminate(id: BigNumberish, to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'terminate(uint256,address)'(
    id: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowed(_id: BigNumberish, _sharesBorrowed: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'borrowed(uint256,uint256)'(_id: BigNumberish, _sharesBorrowed: BigNumberish, overrides?: CallOverrides): Promise<void>;

    create(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _minBorrowAmount: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'create(uint256,address,address,address,uint256,uint256,uint256,bool)'(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _minBorrowAmount: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    repaid(_id: BigNumberish, _sharesRepaid: BigNumberish, _interestShares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'repaid(uint256,uint256,uint256)'(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestCancelled(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'requestCancelled(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    start(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'start(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    terminate(id: BigNumberish, to: string, overrides?: CallOverrides): Promise<void>;

    'terminate(uint256,address)'(id: BigNumberish, to: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    LiquidityWithdrawn(
      amount: null,
      lenderAddress: string | null
    ): TypedEventFilter<[BigNumber, string], { amount: BigNumber; lenderAddress: string }>;
  };

  estimateGas: {
    borrowed(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'borrowed(uint256,uint256)'(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _minBorrowAmount: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'create(uint256,address,address,address,uint256,uint256,uint256,bool)'(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _minBorrowAmount: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repaid(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'repaid(uint256,uint256,uint256)'(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestCancelled(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'requestCancelled(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    start(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'start(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    terminate(id: BigNumberish, to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'terminate(uint256,address)'(
      id: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowed(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'borrowed(uint256,uint256)'(
      _id: BigNumberish,
      _sharesBorrowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _minBorrowAmount: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'create(uint256,address,address,address,uint256,uint256,uint256,bool)'(
      _id: BigNumberish,
      _verifier: string,
      _token: string,
      _strategy: string,
      _borrowLimit: BigNumberish,
      _minBorrowAmount: BigNumberish,
      _collectionPeriod: BigNumberish,
      _areTokensTransferable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repaid(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'repaid(uint256,uint256,uint256)'(
      _id: BigNumberish,
      _sharesRepaid: BigNumberish,
      _interestShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestCancelled(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'requestCancelled(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'start(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    terminate(id: BigNumberish, to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'terminate(uint256,address)'(
      id: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
