/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface IYieldInterface extends ethers.utils.Interface {
  functions: {
    'getSharesForTokens(uint256,address)': FunctionFragment;
    'getTokensForShares(uint256,address)': FunctionFragment;
    'liquidityToken(address)': FunctionFragment;
    'lockTokens(address,address,uint256)': FunctionFragment;
    'unlockShares(address,address,uint256)': FunctionFragment;
    'unlockTokens(address,address,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'getSharesForTokens', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'getTokensForShares', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'liquidityToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'lockTokens', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'unlockShares', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'unlockTokens', values: [string, string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'getSharesForTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokensForShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockTokens', data: BytesLike): Result;

  events: {
    'LockedTokens(address,address,uint256)': EventFragment;
    'SavingsAccountUpdated(address)': EventFragment;
    'UnlockedShares(address,uint256)': EventFragment;
    'UnlockedTokens(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'LockedTokens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SavingsAccountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnlockedShares'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnlockedTokens'): EventFragment;
}

export class IYield extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IYieldInterface;

  functions: {
    getSharesForTokens(
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'getSharesForTokens(uint256,address)'(
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokensForShares(
      shares: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'getTokensForShares(uint256,address)'(
      shares: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityToken(asset: string, overrides?: CallOverrides): Promise<[string] & { tokenAddress: string }>;

    'liquidityToken(address)'(asset: string, overrides?: CallOverrides): Promise<[string] & { tokenAddress: string }>;

    lockTokens(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'lockTokens(address,address,uint256)'(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockShares(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'unlockShares(address,address,uint256)'(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockTokens(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'unlockTokens(address,address,uint256)'(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getSharesForTokens(
    amount: BigNumberish,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'getSharesForTokens(uint256,address)'(
    amount: BigNumberish,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokensForShares(
    shares: BigNumberish,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'getTokensForShares(uint256,address)'(
    shares: BigNumberish,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityToken(asset: string, overrides?: CallOverrides): Promise<string>;

  'liquidityToken(address)'(asset: string, overrides?: CallOverrides): Promise<string>;

  lockTokens(
    user: string,
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'lockTokens(address,address,uint256)'(
    user: string,
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockShares(
    asset: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'unlockShares(address,address,uint256)'(
    asset: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockTokens(
    asset: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'unlockTokens(address,address,uint256)'(
    asset: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getSharesForTokens(amount: BigNumberish, asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getSharesForTokens(uint256,address)'(amount: BigNumberish, asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensForShares(shares: BigNumberish, asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getTokensForShares(uint256,address)'(shares: BigNumberish, asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityToken(asset: string, overrides?: CallOverrides): Promise<string>;

    'liquidityToken(address)'(asset: string, overrides?: CallOverrides): Promise<string>;

    lockTokens(user: string, asset: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'lockTokens(address,address,uint256)'(user: string, asset: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    unlockShares(asset: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'unlockShares(address,address,uint256)'(asset: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    unlockTokens(asset: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'unlockTokens(address,address,uint256)'(asset: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    LockedTokens(
      user: string | null,
      investedTo: string | null,
      lpTokensReceived: null
    ): TypedEventFilter<[string, string, BigNumber], { user: string; investedTo: string; lpTokensReceived: BigNumber }>;

    SavingsAccountUpdated(savingsAccount: string | null): TypedEventFilter<[string], { savingsAccount: string }>;

    UnlockedShares(
      asset: string | null,
      sharesReleased: null
    ): TypedEventFilter<[string, BigNumber], { asset: string; sharesReleased: BigNumber }>;

    UnlockedTokens(
      investedTo: string | null,
      collateralReceived: null
    ): TypedEventFilter<[string, BigNumber], { investedTo: string; collateralReceived: BigNumber }>;
  };

  estimateGas: {
    getSharesForTokens(
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'getSharesForTokens(uint256,address)'(
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokensForShares(
      shares: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'getTokensForShares(uint256,address)'(
      shares: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityToken(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    'liquidityToken(address)'(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockTokens(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'lockTokens(address,address,uint256)'(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockShares(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'unlockShares(address,address,uint256)'(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockTokens(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'unlockTokens(address,address,uint256)'(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getSharesForTokens(
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'getSharesForTokens(uint256,address)'(
      amount: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokensForShares(
      shares: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'getTokensForShares(uint256,address)'(
      shares: BigNumberish,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityToken(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'liquidityToken(address)'(asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockTokens(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'lockTokens(address,address,uint256)'(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockShares(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'unlockShares(address,address,uint256)'(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockTokens(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'unlockTokens(address,address,uint256)'(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
