/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface PoolInterface extends ethers.utils.Interface {
  functions: {
    'addCollateralInMarginCall(address,uint256,bool)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'borrower()': FunctionFragment;
    'calculateCollateralRatio(uint256,uint256)': FunctionFragment;
    'calculateCurrentPeriod()': FunctionFragment;
    'calculateRepaymentWithdrawable(address)': FunctionFragment;
    'cancelPool()': FunctionFragment;
    'closeLoan()': FunctionFragment;
    'correspondingBorrowTokens(uint256,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'depositCollateral(uint256,bool)': FunctionFragment;
    'getBalanceDetails(address)': FunctionFragment;
    'getCurrentCollateralRatio(address)': FunctionFragment;
    'getEquivalentTokens(address,address,uint256)': FunctionFragment;
    'getLoanStatus()': FunctionFragment;
    'getMarginCallEndTime(address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(uint256,uint256,address,address,address,uint256,uint64,uint64,address,uint256,bool,address,uint256,uint256)': FunctionFragment;
    'interestPerPeriod(uint256)': FunctionFragment;
    'interestPerSecond(uint256)': FunctionFragment;
    'interestToPay()': FunctionFragment;
    'lend(address,uint256,address,bool)': FunctionFragment;
    'lenders(address)': FunctionFragment;
    'liquidateCancelPenalty(bool,bool)': FunctionFragment;
    'liquidateForLender(address,bool,bool,bool)': FunctionFragment;
    'liquidatePool(bool,bool,bool)': FunctionFragment;
    'name()': FunctionFragment;
    'paused()': FunctionFragment;
    'poolConstants()': FunctionFragment;
    'poolVariables()': FunctionFragment;
    'requestMarginCall()': FunctionFragment;
    'symbol()': FunctionFragment;
    'terminatePool()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'withdrawBorrowedAmount()': FunctionFragment;
    'withdrawLiquidity()': FunctionFragment;
    'withdrawRepayment()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addCollateralInMarginCall', values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'borrower', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateCollateralRatio', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateCurrentPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateRepaymentWithdrawable', values: [string]): string;
  encodeFunctionData(functionFragment: 'cancelPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'closeLoan', values?: undefined): string;
  encodeFunctionData(functionFragment: 'correspondingBorrowTokens', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositCollateral', values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'getBalanceDetails', values: [string]): string;
  encodeFunctionData(functionFragment: 'getCurrentCollateralRatio', values: [string]): string;
  encodeFunctionData(functionFragment: 'getEquivalentTokens', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getLoanStatus', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMarginCallEndTime', values: [string]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: 'interestPerPeriod', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'interestPerSecond', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'interestToPay', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lend', values: [string, BigNumberish, string, boolean]): string;
  encodeFunctionData(functionFragment: 'lenders', values: [string]): string;
  encodeFunctionData(functionFragment: 'liquidateCancelPenalty', values: [boolean, boolean]): string;
  encodeFunctionData(functionFragment: 'liquidateForLender', values: [string, boolean, boolean, boolean]): string;
  encodeFunctionData(functionFragment: 'liquidatePool', values: [boolean, boolean, boolean]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolConstants', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolVariables', values?: undefined): string;
  encodeFunctionData(functionFragment: 'requestMarginCall', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'terminatePool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawBorrowedAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawLiquidity', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawRepayment', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addCollateralInMarginCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateCurrentPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateRepaymentWithdrawable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'correspondingBorrowTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBalanceDetails', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEquivalentTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoanStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarginCallEndTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestPerPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestToPay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lend', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lenders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateCancelPenalty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateForLender', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolConstants', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolVariables', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestMarginCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'terminatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawBorrowedAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawRepayment', data: BytesLike): Result;

  events: {
    'AmountBorrowed(uint256,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'CollateralAdded(address,uint256,uint256)': EventFragment;
    'CollateralWithdrawn(address,uint256)': EventFragment;
    'LenderLiquidated(address,address,uint256)': EventFragment;
    'LiquiditySupplied(uint256,address)': EventFragment;
    'LiquidityWithdrawn(uint256,address)': EventFragment;
    'MarginCallCollateralAdded(address,address,uint256,uint256)': EventFragment;
    'MarginCalled(address)': EventFragment;
    'Paused(address)': EventFragment;
    'PoolCancelled()': EventFragment;
    'PoolClosed()': EventFragment;
    'PoolLiquidated(address)': EventFragment;
    'PoolTerminated()': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AmountBorrowed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LenderLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquiditySupplied'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarginCallCollateralAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarginCalled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolCancelled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolClosed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolTerminated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export class Pool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolInterface;

  functions: {
    addCollateralInMarginCall(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'allowance(address,address)'(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'balanceOf(address)'(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrower(overrides?: CallOverrides): Promise<[string]>;

    'borrower()'(overrides?: CallOverrides): Promise<[string]>;

    calculateCollateralRatio(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'calculateCollateralRatio(uint256,uint256)'(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateCurrentPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    'calculateCurrentPeriod()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateRepaymentWithdrawable(_lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'calculateRepaymentWithdrawable(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'cancelPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    closeLoan(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'closeLoan()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    correspondingBorrowTokens(
      _totalCollateralTokens: BigNumberish,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'correspondingBorrowTokens(uint256,uint256)'(
      _totalCollateralTokens: BigNumberish,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    'decimals()'(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCollateral(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getCurrentCollateralRatio(address)'(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'getCurrentCollateralRatio()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getEquivalentTokens(_source: string, _target: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getEquivalentTokens(address,address,uint256)'(
      _source: string,
      _target: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLoanStatus(overrides?: CallOverrides): Promise<[BigNumber]>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarginCallEndTime(_lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getMarginCallEndTime(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _borrowAmountRequested: BigNumberish,
      _borrowRate: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _lenderVerifier: string,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(uint256,uint256,address,address,address,uint256,uint64,uint64,address,uint256,bool,address,uint256,uint256)'(
      _borrowAmountRequested: BigNumberish,
      _borrowRate: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _lenderVerifier: string,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestPerPeriod(_balance: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'interestPerPeriod(uint256)'(_balance: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    interestPerSecond(_principal: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'interestPerSecond(uint256)'(_principal: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    interestToPay(overrides?: CallOverrides): Promise<[BigNumber]>;

    'interestToPay()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    lend(
      _lender: string,
      _amount: BigNumberish,
      _strategy: string,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'lend(address,uint256,address,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _strategy: string,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lenders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        marginCallEndTime: BigNumber;
        effectiveInterestWithdrawn: BigNumber;
        extraLiquidityShares: BigNumber;
      }
    >;

    'lenders(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        marginCallEndTime: BigNumber;
        effectiveInterestWithdrawn: BigNumber;
        extraLiquidityShares: BigNumber;
      }
    >;

    liquidateCancelPenalty(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'liquidateCancelPenalty(bool,bool)'(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateForLender(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'liquidateForLender(address,bool,bool,bool)'(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidatePool(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'liquidatePool(bool,bool,bool)'(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    'name()'(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>;

    poolConstants(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, string, string, string, string, BigNumber, BigNumber, BigNumber] & {
        loanStartTime: BigNumber;
        loanWithdrawalDeadline: BigNumber;
        noOfRepaymentIntervals: BigNumber;
        repaymentInterval: BigNumber;
        borrower: string;
        collateralAsset: string;
        borrowAsset: string;
        poolSavingsStrategy: string;
        lenderVerifier: string;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        borrowAmountRequested: BigNumber;
      }
    >;

    'poolConstants()'(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, string, string, string, string, BigNumber, BigNumber, BigNumber] & {
        loanStartTime: BigNumber;
        loanWithdrawalDeadline: BigNumber;
        noOfRepaymentIntervals: BigNumber;
        repaymentInterval: BigNumber;
        borrower: string;
        collateralAsset: string;
        borrowAsset: string;
        poolSavingsStrategy: string;
        lenderVerifier: string;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        borrowAmountRequested: BigNumber;
      }
    >;

    poolVariables(overrides?: CallOverrides): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        loanStatus: number;
        baseLiquidityShares: BigNumber;
        extraLiquidityShares: BigNumber;
        penaltyLiquidityAmount: BigNumber;
      }
    >;

    'poolVariables()'(overrides?: CallOverrides): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        loanStatus: number;
        baseLiquidityShares: BigNumber;
        extraLiquidityShares: BigNumber;
        penaltyLiquidityAmount: BigNumber;
      }
    >;

    requestMarginCall(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'requestMarginCall()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    'symbol()'(overrides?: CallOverrides): Promise<[string]>;

    terminatePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'terminatePool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawLiquidity(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'withdrawLiquidity()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawRepayment(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'withdrawRepayment()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  addCollateralInMarginCall(
    _lender: string,
    _amount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'addCollateralInMarginCall(address,uint256,bool)'(
    _lender: string,
    _amount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'allowance(address,address)'(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(spender: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceOf(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrower(overrides?: CallOverrides): Promise<string>;

  'borrower()'(overrides?: CallOverrides): Promise<string>;

  calculateCollateralRatio(
    _balance: BigNumberish,
    _liquidityShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'calculateCollateralRatio(uint256,uint256)'(
    _balance: BigNumberish,
    _liquidityShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  'calculateCurrentPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

  calculateRepaymentWithdrawable(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'calculateRepaymentWithdrawable(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'cancelPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  closeLoan(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'closeLoan()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  correspondingBorrowTokens(_totalCollateralTokens: BigNumberish, _fraction: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'correspondingBorrowTokens(uint256,uint256)'(
    _totalCollateralTokens: BigNumberish,
    _fraction: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  'decimals()'(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCollateral(
    _amount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'depositCollateral(uint256,bool)'(
    _amount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  'getCurrentCollateralRatio(address)'(
    _lender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'getCurrentCollateralRatio()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getEquivalentTokens(_source: string, _target: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'getEquivalentTokens(address,address,uint256)'(
    _source: string,
    _target: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

  'getLoanStatus()'(overrides?: CallOverrides): Promise<BigNumber>;

  getMarginCallEndTime(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getMarginCallEndTime(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _borrowAmountRequested: BigNumberish,
    _borrowRate: BigNumberish,
    _borrower: string,
    _borrowAsset: string,
    _collateralAsset: string,
    _idealCollateralRatio: BigNumberish,
    _repaymentInterval: BigNumberish,
    _noOfRepaymentIntervals: BigNumberish,
    _poolSavingsStrategy: string,
    _collateralAmount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    _lenderVerifier: string,
    _loanWithdrawalDuration: BigNumberish,
    _collectionPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(uint256,uint256,address,address,address,uint256,uint64,uint64,address,uint256,bool,address,uint256,uint256)'(
    _borrowAmountRequested: BigNumberish,
    _borrowRate: BigNumberish,
    _borrower: string,
    _borrowAsset: string,
    _collateralAsset: string,
    _idealCollateralRatio: BigNumberish,
    _repaymentInterval: BigNumberish,
    _noOfRepaymentIntervals: BigNumberish,
    _poolSavingsStrategy: string,
    _collateralAmount: BigNumberish,
    _transferFromSavingsAccount: boolean,
    _lenderVerifier: string,
    _loanWithdrawalDuration: BigNumberish,
    _collectionPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestPerPeriod(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'interestPerPeriod(uint256)'(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  interestPerSecond(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'interestPerSecond(uint256)'(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  interestToPay(overrides?: CallOverrides): Promise<BigNumber>;

  'interestToPay()'(overrides?: CallOverrides): Promise<BigNumber>;

  lend(
    _lender: string,
    _amount: BigNumberish,
    _strategy: string,
    _fromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'lend(address,uint256,address,bool)'(
    _lender: string,
    _amount: BigNumberish,
    _strategy: string,
    _fromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lenders(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      marginCallEndTime: BigNumber;
      effectiveInterestWithdrawn: BigNumber;
      extraLiquidityShares: BigNumber;
    }
  >;

  'lenders(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      marginCallEndTime: BigNumber;
      effectiveInterestWithdrawn: BigNumber;
      extraLiquidityShares: BigNumber;
    }
  >;

  liquidateCancelPenalty(
    _toSavingsAccount: boolean,
    _receiveLiquidityShare: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'liquidateCancelPenalty(bool,bool)'(
    _toSavingsAccount: boolean,
    _receiveLiquidityShare: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateForLender(
    _lender: string,
    _fromSavingsAccount: boolean,
    _toSavingsAccount: boolean,
    _recieveLiquidityShare: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'liquidateForLender(address,bool,bool,bool)'(
    _lender: string,
    _fromSavingsAccount: boolean,
    _toSavingsAccount: boolean,
    _recieveLiquidityShare: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidatePool(
    _fromSavingsAccount: boolean,
    _toSavingsAccount: boolean,
    _recieveLiquidityShare: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'liquidatePool(bool,bool,bool)'(
    _fromSavingsAccount: boolean,
    _toSavingsAccount: boolean,
    _recieveLiquidityShare: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  'name()'(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  'paused()'(overrides?: CallOverrides): Promise<boolean>;

  poolConstants(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, string, string, string, string, BigNumber, BigNumber, BigNumber] & {
      loanStartTime: BigNumber;
      loanWithdrawalDeadline: BigNumber;
      noOfRepaymentIntervals: BigNumber;
      repaymentInterval: BigNumber;
      borrower: string;
      collateralAsset: string;
      borrowAsset: string;
      poolSavingsStrategy: string;
      lenderVerifier: string;
      borrowRate: BigNumber;
      idealCollateralRatio: BigNumber;
      borrowAmountRequested: BigNumber;
    }
  >;

  'poolConstants()'(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, string, string, string, string, BigNumber, BigNumber, BigNumber] & {
      loanStartTime: BigNumber;
      loanWithdrawalDeadline: BigNumber;
      noOfRepaymentIntervals: BigNumber;
      repaymentInterval: BigNumber;
      borrower: string;
      collateralAsset: string;
      borrowAsset: string;
      poolSavingsStrategy: string;
      lenderVerifier: string;
      borrowRate: BigNumber;
      idealCollateralRatio: BigNumber;
      borrowAmountRequested: BigNumber;
    }
  >;

  poolVariables(overrides?: CallOverrides): Promise<
    [number, BigNumber, BigNumber, BigNumber] & {
      loanStatus: number;
      baseLiquidityShares: BigNumber;
      extraLiquidityShares: BigNumber;
      penaltyLiquidityAmount: BigNumber;
    }
  >;

  'poolVariables()'(overrides?: CallOverrides): Promise<
    [number, BigNumber, BigNumber, BigNumber] & {
      loanStatus: number;
      baseLiquidityShares: BigNumber;
      extraLiquidityShares: BigNumber;
      penaltyLiquidityAmount: BigNumber;
    }
  >;

  requestMarginCall(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'requestMarginCall()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  'symbol()'(overrides?: CallOverrides): Promise<string>;

  terminatePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'terminatePool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawLiquidity(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'withdrawLiquidity()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawRepayment(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'withdrawRepayment()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    addCollateralInMarginCall(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'allowance(address,address)'(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'approve(address,uint256)'(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<string>;

    'borrower()'(overrides?: CallOverrides): Promise<string>;

    calculateCollateralRatio(_balance: BigNumberish, _liquidityShares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCollateralRatio(uint256,uint256)'(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRepaymentWithdrawable(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateRepaymentWithdrawable(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelPool(overrides?: CallOverrides): Promise<void>;

    'cancelPool()'(overrides?: CallOverrides): Promise<void>;

    closeLoan(overrides?: CallOverrides): Promise<void>;

    'closeLoan()'(overrides?: CallOverrides): Promise<void>;

    correspondingBorrowTokens(_totalCollateralTokens: BigNumberish, _fraction: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'correspondingBorrowTokens(uint256,uint256)'(
      _totalCollateralTokens: BigNumberish,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    'decimals()'(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'decreaseAllowance(address,uint256)'(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    depositCollateral(_amount: BigNumberish, _transferFromSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'getCurrentCollateralRatio(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getCurrentCollateralRatio()'(overrides?: CallOverrides): Promise<BigNumber>;

    getEquivalentTokens(_source: string, _target: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getEquivalentTokens(address,address,uint256)'(
      _source: string,
      _target: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginCallEndTime(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getMarginCallEndTime(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'increaseAllowance(address,uint256)'(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _borrowAmountRequested: BigNumberish,
      _borrowRate: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _lenderVerifier: string,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'initialize(uint256,uint256,address,address,address,uint256,uint64,uint64,address,uint256,bool,address,uint256,uint256)'(
      _borrowAmountRequested: BigNumberish,
      _borrowRate: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _lenderVerifier: string,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    interestPerPeriod(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'interestPerPeriod(uint256)'(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    interestPerSecond(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'interestPerSecond(uint256)'(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    interestToPay(overrides?: CallOverrides): Promise<BigNumber>;

    'interestToPay()'(overrides?: CallOverrides): Promise<BigNumber>;

    lend(_lender: string, _amount: BigNumberish, _strategy: string, _fromSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'lend(address,uint256,address,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _strategy: string,
      _fromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    lenders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        marginCallEndTime: BigNumber;
        effectiveInterestWithdrawn: BigNumber;
        extraLiquidityShares: BigNumber;
      }
    >;

    'lenders(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        marginCallEndTime: BigNumber;
        effectiveInterestWithdrawn: BigNumber;
        extraLiquidityShares: BigNumber;
      }
    >;

    liquidateCancelPenalty(_toSavingsAccount: boolean, _receiveLiquidityShare: boolean, overrides?: CallOverrides): Promise<void>;

    'liquidateCancelPenalty(bool,bool)'(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateForLender(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'liquidateForLender(address,bool,bool,bool)'(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatePool(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'liquidatePool(bool,bool,bool)'(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    'name()'(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    'paused()'(overrides?: CallOverrides): Promise<boolean>;

    poolConstants(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, string, string, string, string, BigNumber, BigNumber, BigNumber] & {
        loanStartTime: BigNumber;
        loanWithdrawalDeadline: BigNumber;
        noOfRepaymentIntervals: BigNumber;
        repaymentInterval: BigNumber;
        borrower: string;
        collateralAsset: string;
        borrowAsset: string;
        poolSavingsStrategy: string;
        lenderVerifier: string;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        borrowAmountRequested: BigNumber;
      }
    >;

    'poolConstants()'(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, string, string, string, string, BigNumber, BigNumber, BigNumber] & {
        loanStartTime: BigNumber;
        loanWithdrawalDeadline: BigNumber;
        noOfRepaymentIntervals: BigNumber;
        repaymentInterval: BigNumber;
        borrower: string;
        collateralAsset: string;
        borrowAsset: string;
        poolSavingsStrategy: string;
        lenderVerifier: string;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        borrowAmountRequested: BigNumber;
      }
    >;

    poolVariables(overrides?: CallOverrides): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        loanStatus: number;
        baseLiquidityShares: BigNumber;
        extraLiquidityShares: BigNumber;
        penaltyLiquidityAmount: BigNumber;
      }
    >;

    'poolVariables()'(overrides?: CallOverrides): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        loanStatus: number;
        baseLiquidityShares: BigNumber;
        extraLiquidityShares: BigNumber;
        penaltyLiquidityAmount: BigNumber;
      }
    >;

    requestMarginCall(overrides?: CallOverrides): Promise<void>;

    'requestMarginCall()'(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    'symbol()'(overrides?: CallOverrides): Promise<string>;

    terminatePool(overrides?: CallOverrides): Promise<void>;

    'terminatePool()'(overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'transfer(address,uint256)'(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawBorrowedAmount(overrides?: CallOverrides): Promise<void>;

    'withdrawBorrowedAmount()'(overrides?: CallOverrides): Promise<void>;

    withdrawLiquidity(overrides?: CallOverrides): Promise<void>;

    'withdrawLiquidity()'(overrides?: CallOverrides): Promise<void>;

    withdrawRepayment(overrides?: CallOverrides): Promise<void>;

    'withdrawRepayment()'(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AmountBorrowed(
      amount: null,
      protocolFee: null
    ): TypedEventFilter<[BigNumber, BigNumber], { amount: BigNumber; protocolFee: BigNumber }>;

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

    CollateralAdded(
      borrower: string | null,
      amount: null,
      sharesReceived: null
    ): TypedEventFilter<[string, BigNumber, BigNumber], { borrower: string; amount: BigNumber; sharesReceived: BigNumber }>;

    CollateralWithdrawn(
      borrower: string | null,
      amount: null
    ): TypedEventFilter<[string, BigNumber], { borrower: string; amount: BigNumber }>;

    LenderLiquidated(
      liquidator: string | null,
      lender: string | null,
      _tokenReceived: null
    ): TypedEventFilter<[string, string, BigNumber], { liquidator: string; lender: string; _tokenReceived: BigNumber }>;

    LiquiditySupplied(
      amountSupplied: null,
      lenderAddress: string | null
    ): TypedEventFilter<[BigNumber, string], { amountSupplied: BigNumber; lenderAddress: string }>;

    LiquidityWithdrawn(
      amount: null,
      lenderAddress: string | null
    ): TypedEventFilter<[BigNumber, string], { amount: BigNumber; lenderAddress: string }>;

    MarginCallCollateralAdded(
      borrower: string | null,
      lender: string | null,
      amount: null,
      sharesReceived: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        borrower: string;
        lender: string;
        amount: BigNumber;
        sharesReceived: BigNumber;
      }
    >;

    MarginCalled(lenderAddress: string | null): TypedEventFilter<[string], { lenderAddress: string }>;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    PoolCancelled(): TypedEventFilter<[], {}>;

    PoolClosed(): TypedEventFilter<[], {}>;

    PoolLiquidated(liquidator: string | null): TypedEventFilter<[string], { liquidator: string }>;

    PoolTerminated(): TypedEventFilter<[], {}>;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    addCollateralInMarginCall(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'allowance(address,address)'(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<BigNumber>;

    'borrower()'(overrides?: CallOverrides): Promise<BigNumber>;

    calculateCollateralRatio(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'calculateCollateralRatio(uint256,uint256)'(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentPeriod()'(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRepaymentWithdrawable(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateRepaymentWithdrawable(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'cancelPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    closeLoan(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'closeLoan()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    correspondingBorrowTokens(_totalCollateralTokens: BigNumberish, _fraction: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'correspondingBorrowTokens(uint256,uint256)'(
      _totalCollateralTokens: BigNumberish,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCollateral(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getCurrentCollateralRatio(address)'(_lender: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'getCurrentCollateralRatio()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getEquivalentTokens(_source: string, _target: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getEquivalentTokens(address,address,uint256)'(
      _source: string,
      _target: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginCallEndTime(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getMarginCallEndTime(address)'(_lender: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _borrowAmountRequested: BigNumberish,
      _borrowRate: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _lenderVerifier: string,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(uint256,uint256,address,address,address,uint256,uint64,uint64,address,uint256,bool,address,uint256,uint256)'(
      _borrowAmountRequested: BigNumberish,
      _borrowRate: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _lenderVerifier: string,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestPerPeriod(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'interestPerPeriod(uint256)'(_balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    interestPerSecond(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'interestPerSecond(uint256)'(_principal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    interestToPay(overrides?: CallOverrides): Promise<BigNumber>;

    'interestToPay()'(overrides?: CallOverrides): Promise<BigNumber>;

    lend(
      _lender: string,
      _amount: BigNumberish,
      _strategy: string,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'lend(address,uint256,address,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _strategy: string,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lenders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'lenders(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidateCancelPenalty(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'liquidateCancelPenalty(bool,bool)'(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateForLender(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'liquidateForLender(address,bool,bool,bool)'(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidatePool(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'liquidatePool(bool,bool,bool)'(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    'name()'(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolConstants(overrides?: CallOverrides): Promise<BigNumber>;

    'poolConstants()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolVariables(overrides?: CallOverrides): Promise<BigNumber>;

    'poolVariables()'(overrides?: CallOverrides): Promise<BigNumber>;

    requestMarginCall(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'requestMarginCall()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>;

    terminatePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'terminatePool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawLiquidity(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawLiquidity()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawRepayment(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawRepayment()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateralInMarginCall(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'addCollateralInMarginCall(address,uint256,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'allowance(address,address)'(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'balanceOf(address)'(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'borrower()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateCollateralRatio(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateCollateralRatio(uint256,uint256)'(
      _balance: BigNumberish,
      _liquidityShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateCurrentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'calculateCurrentPeriod()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRepaymentWithdrawable(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'calculateRepaymentWithdrawable(address)'(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'cancelPool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    closeLoan(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'closeLoan()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    correspondingBorrowTokens(
      _totalCollateralTokens: BigNumberish,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'correspondingBorrowTokens(uint256,uint256)'(
      _totalCollateralTokens: BigNumberish,
      _fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'depositCollateral(uint256,bool)'(
      _amount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalanceDetails(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getBalanceDetails(address)'(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getCurrentCollateralRatio(address)'(
      _lender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'getCurrentCollateralRatio()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getEquivalentTokens(_source: string, _target: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getEquivalentTokens(address,address,uint256)'(
      _source: string,
      _target: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getLoanStatus()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarginCallEndTime(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getMarginCallEndTime(address)'(_lender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _borrowAmountRequested: BigNumberish,
      _borrowRate: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _lenderVerifier: string,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(uint256,uint256,address,address,address,uint256,uint64,uint64,address,uint256,bool,address,uint256,uint256)'(
      _borrowAmountRequested: BigNumberish,
      _borrowRate: BigNumberish,
      _borrower: string,
      _borrowAsset: string,
      _collateralAsset: string,
      _idealCollateralRatio: BigNumberish,
      _repaymentInterval: BigNumberish,
      _noOfRepaymentIntervals: BigNumberish,
      _poolSavingsStrategy: string,
      _collateralAmount: BigNumberish,
      _transferFromSavingsAccount: boolean,
      _lenderVerifier: string,
      _loanWithdrawalDuration: BigNumberish,
      _collectionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestPerPeriod(_balance: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'interestPerPeriod(uint256)'(_balance: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestPerSecond(_principal: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'interestPerSecond(uint256)'(_principal: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestToPay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'interestToPay()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lend(
      _lender: string,
      _amount: BigNumberish,
      _strategy: string,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'lend(address,uint256,address,bool)'(
      _lender: string,
      _amount: BigNumberish,
      _strategy: string,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lenders(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lenders(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateCancelPenalty(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'liquidateCancelPenalty(bool,bool)'(
      _toSavingsAccount: boolean,
      _receiveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateForLender(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'liquidateForLender(address,bool,bool,bool)'(
      _lender: string,
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidatePool(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'liquidatePool(bool,bool,bool)'(
      _fromSavingsAccount: boolean,
      _toSavingsAccount: boolean,
      _recieveLiquidityShare: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolConstants()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolVariables(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolVariables()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestMarginCall(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'requestMarginCall()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    terminatePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'terminatePool()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBorrowedAmount(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'withdrawBorrowedAmount()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawLiquidity(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'withdrawLiquidity()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawRepayment(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'withdrawRepayment()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
