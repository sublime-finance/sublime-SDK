/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface CreditLineInterface extends ethers.utils.Interface {
  functions: {
    'PRICE_ORACLE()': FunctionFragment;
    'SAVINGS_ACCOUNT()': FunctionFragment;
    'STRATEGY_REGISTRY()': FunctionFragment;
    'accept(uint256)': FunctionFragment;
    'borrow(uint256,uint256)': FunctionFragment;
    'borrowLimitLimits()': FunctionFragment;
    'borrowRateLimits()': FunctionFragment;
    'borrowTokensToLiquidate(uint256)': FunctionFragment;
    'calculateBorrowableAmount(uint256)': FunctionFragment;
    'calculateCurrentCollateralRatio(uint256)': FunctionFragment;
    'calculateCurrentDebt(uint256)': FunctionFragment;
    'calculateInterest(uint256,uint256,uint256)': FunctionFragment;
    'calculateInterestAccrued(uint256)': FunctionFragment;
    'calculateTotalCollateralTokens(uint256)': FunctionFragment;
    'cancel(uint256)': FunctionFragment;
    'close(uint256)': FunctionFragment;
    'collateralShareInStrategy(uint256)': FunctionFragment;
    'creditLineConstants(uint256)': FunctionFragment;
    'creditLineCounter()': FunctionFragment;
    'creditLineVariables(uint256)': FunctionFragment;
    'depositCollateral(uint256,uint256,bool)': FunctionFragment;
    'getCreditLineStatus(uint256)': FunctionFragment;
    'idealCollateralRatioLimits()': FunctionFragment;
    'initialize(address,uint256,address,uint256)': FunctionFragment;
    'liquidate(uint256,bool)': FunctionFragment;
    'liquidatorRewardFraction()': FunctionFragment;
    'owner()': FunctionFragment;
    'protocolFeeCollector()': FunctionFragment;
    'protocolFeeFraction()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repay(uint256,uint256)': FunctionFragment;
    'request(address,uint128,uint128,bool,uint256,address,address,address,address,bool)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateBorrowLimit(uint256,uint128)': FunctionFragment;
    'updateBorrowLimitLimits(uint256,uint256)': FunctionFragment;
    'updateBorrowRateLimits(uint256,uint256)': FunctionFragment;
    'updateIdealCollateralRatioLimits(uint256,uint256)': FunctionFragment;
    'updateLiquidatorRewardFraction(uint256)': FunctionFragment;
    'updateProtocolFeeCollector(address)': FunctionFragment;
    'updateProtocolFeeFraction(uint256)': FunctionFragment;
    'withdrawAllCollateral(uint256,bool)': FunctionFragment;
    'withdrawCollateral(uint256,uint256,bool)': FunctionFragment;
    'withdrawableCollateral(uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'PRICE_ORACLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SAVINGS_ACCOUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'STRATEGY_REGISTRY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accept', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'borrow', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'borrowLimitLimits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowRateLimits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowTokensToLiquidate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateBorrowableAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateCurrentCollateralRatio', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateCurrentDebt', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateInterest', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateInterestAccrued', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateTotalCollateralTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'cancel', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'close', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'collateralShareInStrategy', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'creditLineConstants', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'creditLineCounter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'creditLineVariables', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositCollateral', values: [BigNumberish, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'getCreditLineStatus', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'idealCollateralRatioLimits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, BigNumberish, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'liquidate', values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'liquidatorRewardFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolFeeCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolFeeFraction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repay', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'request',
    values: [string, BigNumberish, BigNumberish, boolean, BigNumberish, string, string, string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateBorrowLimit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateBorrowLimitLimits', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateBorrowRateLimits', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateIdealCollateralRatioLimits', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateLiquidatorRewardFraction', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateProtocolFeeCollector', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateProtocolFeeFraction', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawAllCollateral', values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'withdrawCollateral', values: [BigNumberish, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'withdrawableCollateral', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'PRICE_ORACLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SAVINGS_ACCOUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'STRATEGY_REGISTRY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accept', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowLimitLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowRateLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowTokensToLiquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateBorrowableAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateCurrentCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateCurrentDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateInterestAccrued', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateTotalCollateralTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'close', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralShareInStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditLineConstants', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditLineCounter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditLineVariables', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCreditLineStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'idealCollateralRatioLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidatorRewardFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolFeeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolFeeFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'request', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBorrowLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBorrowLimitLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBorrowRateLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateIdealCollateralRatioLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLiquidatorRewardFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProtocolFeeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProtocolFeeFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAllCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawableCollateral', data: BytesLike): Result;

  events: {
    'BorrowLimitUpdated(uint256,uint128)': EventFragment;
    'BorrowedFromCreditLine(uint256,uint256)': EventFragment;
    'CollateralDeposited(uint256,uint256,address)': EventFragment;
    'CollateralWithdrawn(uint256,uint256)': EventFragment;
    'CompleteCreditLineRepaid(uint256,address,uint256)': EventFragment;
    'CreditLineAccepted(uint256)': EventFragment;
    'CreditLineCancelled(uint256)': EventFragment;
    'CreditLineClosed(uint256,bool)': EventFragment;
    'CreditLineLiquidated(uint256,address)': EventFragment;
    'CreditLineRequested(uint256,address,address,bool)': EventFragment;
    'CreditLineReset(uint256)': EventFragment;
    'LimitsUpdated(string,uint256,uint256)': EventFragment;
    'LiquidationRewardFractionUpdated(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PartialCreditLineRepaid(uint256,address,uint256)': EventFragment;
    'ProtocolFeeCollectorUpdated(address)': EventFragment;
    'ProtocolFeeFractionUpdated(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BorrowLimitUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BorrowedFromCreditLine'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralDeposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CompleteCreditLineRepaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineAccepted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineCancelled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineClosed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineRequested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditLineReset'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LimitsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidationRewardFractionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PartialCreditLineRepaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeCollectorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeFractionUpdated'): EventFragment;
}

export class CreditLine extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CreditLineInterface;

  functions: {
    PRICE_ORACLE(overrides?: CallOverrides): Promise<[string]>;

    'PRICE_ORACLE()'(overrides?: CallOverrides): Promise<[string]>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<[string]>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<[string]>;

    STRATEGY_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    'STRATEGY_REGISTRY()'(overrides?: CallOverrides): Promise<[string]>;

    accept(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'accept(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    borrow(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'borrow(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowLimitLimits(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'borrowLimitLimits()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    borrowRateLimits(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'borrowRateLimits()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    borrowTokensToLiquidate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'borrowTokensToLiquidate(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateBorrowableAmount(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'calculateBorrowableAmount(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateCurrentCollateralRatio(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'calculateCurrentCollateralRatio(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateCurrentDebt(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'calculateCurrentDebt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateInterest(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'calculateInterest(uint256,uint256,uint256)'(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateInterestAccrued(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'calculateInterestAccrued(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateTotalCollateralTokens(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'calculateTotalCollateralTokens(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'cancel(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    close(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'close(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    collateralShareInStrategy(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'collateralShareInStrategy(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    creditLineConstants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, string, string, string, string, string, string] & {
        autoLiquidation: boolean;
        requestByLender: boolean;
        borrowLimit: BigNumber;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        lender: string;
        borrower: string;
        borrowAsset: string;
        borrowAssetStrategy: string;
        collateralAsset: string;
        collateralStrategy: string;
      }
    >;

    'creditLineConstants(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, string, string, string, string, string, string] & {
        autoLiquidation: boolean;
        requestByLender: boolean;
        borrowLimit: BigNumber;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        lender: string;
        borrower: string;
        borrowAsset: string;
        borrowAssetStrategy: string;
        collateralAsset: string;
        collateralStrategy: string;
      }
    >;

    creditLineCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    'creditLineCounter()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    creditLineVariables(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillLastPrincipalUpdate: BigNumber;
      }
    >;

    'creditLineVariables(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillLastPrincipalUpdate: BigNumber;
      }
    >;

    depositCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'depositCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCreditLineStatus(_id: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    'getCreditLineStatus(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    idealCollateralRatioLimits(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'idealCollateralRatioLimits()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    initialize(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(address,uint256,address,uint256)'(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'liquidate(uint256,bool)'(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    repay(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'repay(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    request(
      _requestTo: string,
      _borrowLimit: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _borrowAssetStrategy: string,
      _collateralAsset: string,
      _collateralStrategy: string,
      _requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'request(address,uint128,uint128,bool,uint256,address,address,address,address,bool)'(
      _requestTo: string,
      _borrowLimit: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _borrowAssetStrategy: string,
      _collateralAsset: string,
      _collateralStrategy: string,
      _requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBorrowLimit(
      _id: BigNumberish,
      _newBorrowLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateBorrowLimit(uint256,uint128)'(
      _id: BigNumberish,
      _newBorrowLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBorrowLimitLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateBorrowLimitLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBorrowRateLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateBorrowRateLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIdealCollateralRatioLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateIdealCollateralRatioLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiquidatorRewardFraction(
      _rewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateLiquidatorRewardFraction(uint256)'(
      _rewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolFeeFraction(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllCollateral(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawAllCollateral(uint256,bool)'(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawableCollateral(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'withdrawableCollateral(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PRICE_ORACLE(overrides?: CallOverrides): Promise<string>;

  'PRICE_ORACLE()'(overrides?: CallOverrides): Promise<string>;

  SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<string>;

  'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<string>;

  STRATEGY_REGISTRY(overrides?: CallOverrides): Promise<string>;

  'STRATEGY_REGISTRY()'(overrides?: CallOverrides): Promise<string>;

  accept(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'accept(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  borrow(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'borrow(uint256,uint256)'(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowLimitLimits(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  'borrowLimitLimits()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  borrowRateLimits(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  'borrowRateLimits()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  borrowTokensToLiquidate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'borrowTokensToLiquidate(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateBorrowableAmount(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'calculateBorrowableAmount(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateCurrentCollateralRatio(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'calculateCurrentCollateralRatio(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateCurrentDebt(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'calculateCurrentDebt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  calculateInterest(
    _principal: BigNumberish,
    _borrowRate: BigNumberish,
    _timeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'calculateInterest(uint256,uint256,uint256)'(
    _principal: BigNumberish,
    _borrowRate: BigNumberish,
    _timeElapsed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateInterestAccrued(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'calculateInterestAccrued(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  calculateTotalCollateralTokens(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'calculateTotalCollateralTokens(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'cancel(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  close(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'close(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  collateralShareInStrategy(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'collateralShareInStrategy(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  creditLineConstants(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, BigNumber, string, string, string, string, string, string] & {
      autoLiquidation: boolean;
      requestByLender: boolean;
      borrowLimit: BigNumber;
      borrowRate: BigNumber;
      idealCollateralRatio: BigNumber;
      lender: string;
      borrower: string;
      borrowAsset: string;
      borrowAssetStrategy: string;
      collateralAsset: string;
      collateralStrategy: string;
    }
  >;

  'creditLineConstants(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, BigNumber, string, string, string, string, string, string] & {
      autoLiquidation: boolean;
      requestByLender: boolean;
      borrowLimit: BigNumber;
      borrowRate: BigNumber;
      idealCollateralRatio: BigNumber;
      lender: string;
      borrower: string;
      borrowAsset: string;
      borrowAssetStrategy: string;
      collateralAsset: string;
      collateralStrategy: string;
    }
  >;

  creditLineCounter(overrides?: CallOverrides): Promise<BigNumber>;

  'creditLineCounter()'(overrides?: CallOverrides): Promise<BigNumber>;

  creditLineVariables(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      principal: BigNumber;
      totalInterestRepaid: BigNumber;
      lastPrincipalUpdateTime: BigNumber;
      interestAccruedTillLastPrincipalUpdate: BigNumber;
    }
  >;

  'creditLineVariables(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      principal: BigNumber;
      totalInterestRepaid: BigNumber;
      lastPrincipalUpdateTime: BigNumber;
      interestAccruedTillLastPrincipalUpdate: BigNumber;
    }
  >;

  depositCollateral(
    _id: BigNumberish,
    _amount: BigNumberish,
    _fromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'depositCollateral(uint256,uint256,bool)'(
    _id: BigNumberish,
    _amount: BigNumberish,
    _fromSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCreditLineStatus(_id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  'getCreditLineStatus(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  idealCollateralRatioLimits(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  'idealCollateralRatioLimits()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  initialize(
    _owner: string,
    _protocolFeeFraction: BigNumberish,
    _protocolFeeCollector: string,
    _liquidatorRewardFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(address,uint256,address,uint256)'(
    _owner: string,
    _protocolFeeFraction: BigNumberish,
    _protocolFeeCollector: string,
    _liquidatorRewardFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    _id: BigNumberish,
    _toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'liquidate(uint256,bool)'(
    _id: BigNumberish,
    _toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

  'protocolFeeCollector()'(overrides?: CallOverrides): Promise<string>;

  protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

  'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  repay(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'repay(uint256,uint256)'(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  request(
    _requestTo: string,
    _borrowLimit: BigNumberish,
    _borrowRate: BigNumberish,
    _autoLiquidation: boolean,
    _collateralRatio: BigNumberish,
    _borrowAsset: string,
    _borrowAssetStrategy: string,
    _collateralAsset: string,
    _collateralStrategy: string,
    _requestAsLender: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'request(address,uint128,uint128,bool,uint256,address,address,address,address,bool)'(
    _requestTo: string,
    _borrowLimit: BigNumberish,
    _borrowRate: BigNumberish,
    _autoLiquidation: boolean,
    _collateralRatio: BigNumberish,
    _borrowAsset: string,
    _borrowAssetStrategy: string,
    _collateralAsset: string,
    _collateralStrategy: string,
    _requestAsLender: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  updateBorrowLimit(
    _id: BigNumberish,
    _newBorrowLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateBorrowLimit(uint256,uint128)'(
    _id: BigNumberish,
    _newBorrowLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBorrowLimitLimits(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateBorrowLimitLimits(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBorrowRateLimits(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateBorrowRateLimits(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIdealCollateralRatioLimits(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateIdealCollateralRatioLimits(uint256,uint256)'(
    _min: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiquidatorRewardFraction(
    _rewardFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateLiquidatorRewardFraction(uint256)'(
    _rewardFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolFeeCollector(
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateProtocolFeeCollector(address)'(
    _protocolFeeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolFeeFraction(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'updateProtocolFeeFraction(uint256)'(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllCollateral(
    _id: BigNumberish,
    _toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawAllCollateral(uint256,bool)'(
    _id: BigNumberish,
    _toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    _id: BigNumberish,
    _amount: BigNumberish,
    _toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawCollateral(uint256,uint256,bool)'(
    _id: BigNumberish,
    _amount: BigNumberish,
    _toSavingsAccount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawableCollateral(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'withdrawableCollateral(uint256)'(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PRICE_ORACLE(overrides?: CallOverrides): Promise<string>;

    'PRICE_ORACLE()'(overrides?: CallOverrides): Promise<string>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<string>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<string>;

    STRATEGY_REGISTRY(overrides?: CallOverrides): Promise<string>;

    'STRATEGY_REGISTRY()'(overrides?: CallOverrides): Promise<string>;

    accept(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'accept(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    borrow(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'borrow(uint256,uint256)'(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    borrowLimitLimits(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'borrowLimitLimits()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    borrowRateLimits(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'borrowRateLimits()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    borrowTokensToLiquidate(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'borrowTokensToLiquidate(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateBorrowableAmount(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateBorrowableAmount(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateCurrentCollateralRatio(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    'calculateCurrentCollateralRatio(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    calculateCurrentDebt(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentDebt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterest(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateInterest(uint256,uint256,uint256)'(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInterestAccrued(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateInterestAccrued(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalCollateralTokens(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateTotalCollateralTokens(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    cancel(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'cancel(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    close(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'close(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    collateralShareInStrategy(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'collateralShareInStrategy(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    creditLineConstants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, string, string, string, string, string, string] & {
        autoLiquidation: boolean;
        requestByLender: boolean;
        borrowLimit: BigNumber;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        lender: string;
        borrower: string;
        borrowAsset: string;
        borrowAssetStrategy: string;
        collateralAsset: string;
        collateralStrategy: string;
      }
    >;

    'creditLineConstants(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, string, string, string, string, string, string] & {
        autoLiquidation: boolean;
        requestByLender: boolean;
        borrowLimit: BigNumber;
        borrowRate: BigNumber;
        idealCollateralRatio: BigNumber;
        lender: string;
        borrower: string;
        borrowAsset: string;
        borrowAssetStrategy: string;
        collateralAsset: string;
        collateralStrategy: string;
      }
    >;

    creditLineCounter(overrides?: CallOverrides): Promise<BigNumber>;

    'creditLineCounter()'(overrides?: CallOverrides): Promise<BigNumber>;

    creditLineVariables(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillLastPrincipalUpdate: BigNumber;
      }
    >;

    'creditLineVariables(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        principal: BigNumber;
        totalInterestRepaid: BigNumber;
        lastPrincipalUpdateTime: BigNumber;
        interestAccruedTillLastPrincipalUpdate: BigNumber;
      }
    >;

    depositCollateral(_id: BigNumberish, _amount: BigNumberish, _fromSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'depositCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getCreditLineStatus(_id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    'getCreditLineStatus(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    idealCollateralRatioLimits(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    'idealCollateralRatioLimits()'(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    initialize(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _liquidatorRewardFraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'initialize(address,uint256,address,uint256)'(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _liquidatorRewardFraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(_id: BigNumberish, _toSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'liquidate(uint256,bool)'(_id: BigNumberish, _toSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<string>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    repay(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'repay(uint256,uint256)'(_id: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    request(
      _requestTo: string,
      _borrowLimit: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _borrowAssetStrategy: string,
      _collateralAsset: string,
      _collateralStrategy: string,
      _requestAsLender: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'request(address,uint128,uint128,bool,uint256,address,address,address,address,bool)'(
      _requestTo: string,
      _borrowLimit: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _borrowAssetStrategy: string,
      _collateralAsset: string,
      _collateralStrategy: string,
      _requestAsLender: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateBorrowLimit(_id: BigNumberish, _newBorrowLimit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateBorrowLimit(uint256,uint128)'(_id: BigNumberish, _newBorrowLimit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateBorrowLimitLimits(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateBorrowLimitLimits(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateBorrowRateLimits(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateBorrowRateLimits(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateIdealCollateralRatioLimits(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateIdealCollateralRatioLimits(uint256,uint256)'(_min: BigNumberish, _max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateLiquidatorRewardFraction(_rewardFraction: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateLiquidatorRewardFraction(uint256)'(_rewardFraction: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateProtocolFeeCollector(_protocolFeeCollector: string, overrides?: CallOverrides): Promise<void>;

    'updateProtocolFeeCollector(address)'(_protocolFeeCollector: string, overrides?: CallOverrides): Promise<void>;

    updateProtocolFeeFraction(_protocolFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateProtocolFeeFraction(uint256)'(_protocolFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAllCollateral(_id: BigNumberish, _toSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'withdrawAllCollateral(uint256,bool)'(_id: BigNumberish, _toSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    withdrawCollateral(_id: BigNumberish, _amount: BigNumberish, _toSavingsAccount: boolean, overrides?: CallOverrides): Promise<void>;

    'withdrawCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawableCollateral(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'withdrawableCollateral(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    BorrowLimitUpdated(
      id: BigNumberish | null,
      updatedBorrowLimit: null
    ): TypedEventFilter<[BigNumber, BigNumber], { id: BigNumber; updatedBorrowLimit: BigNumber }>;

    BorrowedFromCreditLine(
      id: BigNumberish | null,
      borrowAmount: null
    ): TypedEventFilter<[BigNumber, BigNumber], { id: BigNumber; borrowAmount: BigNumber }>;

    CollateralDeposited(
      id: BigNumberish | null,
      shares: null,
      strategy: string | null
    ): TypedEventFilter<[BigNumber, BigNumber, string], { id: BigNumber; shares: BigNumber; strategy: string }>;

    CollateralWithdrawn(
      id: BigNumberish | null,
      shares: null
    ): TypedEventFilter<[BigNumber, BigNumber], { id: BigNumber; shares: BigNumber }>;

    CompleteCreditLineRepaid(
      id: BigNumberish | null,
      repayer: string | null,
      repayAmount: null
    ): TypedEventFilter<[BigNumber, string, BigNumber], { id: BigNumber; repayer: string; repayAmount: BigNumber }>;

    CreditLineAccepted(id: BigNumberish | null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    CreditLineCancelled(id: BigNumberish | null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    CreditLineClosed(
      id: BigNumberish | null,
      closedByLender: null
    ): TypedEventFilter<[BigNumber, boolean], { id: BigNumber; closedByLender: boolean }>;

    CreditLineLiquidated(
      id: BigNumberish | null,
      liquidator: string | null
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; liquidator: string }>;

    CreditLineRequested(
      id: BigNumberish | null,
      lender: string | null,
      borrower: string | null,
      requestByLender: null
    ): TypedEventFilter<
      [BigNumber, string, string, boolean],
      {
        id: BigNumber;
        lender: string;
        borrower: string;
        requestByLender: boolean;
      }
    >;

    CreditLineReset(id: BigNumberish | null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    LimitsUpdated(
      limitType: string | null,
      max: null,
      min: null
    ): TypedEventFilter<[string, BigNumber, BigNumber], { limitType: string; max: BigNumber; min: BigNumber }>;

    LiquidationRewardFractionUpdated(
      liquidatorRewardFraction: null
    ): TypedEventFilter<[BigNumber], { liquidatorRewardFraction: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    PartialCreditLineRepaid(
      id: BigNumberish | null,
      repayer: string | null,
      repayAmount: null
    ): TypedEventFilter<[BigNumber, string, BigNumber], { id: BigNumber; repayer: string; repayAmount: BigNumber }>;

    ProtocolFeeCollectorUpdated(
      updatedProtocolFeeCollector: string | null
    ): TypedEventFilter<[string], { updatedProtocolFeeCollector: string }>;

    ProtocolFeeFractionUpdated(updatedProtocolFee: null): TypedEventFilter<[BigNumber], { updatedProtocolFee: BigNumber }>;
  };

  estimateGas: {
    PRICE_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    'PRICE_ORACLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<BigNumber>;

    STRATEGY_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    'STRATEGY_REGISTRY()'(overrides?: CallOverrides): Promise<BigNumber>;

    accept(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'accept(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    borrow(_id: BigNumberish, _amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'borrow(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowLimitLimits(overrides?: CallOverrides): Promise<BigNumber>;

    'borrowLimitLimits()'(overrides?: CallOverrides): Promise<BigNumber>;

    borrowRateLimits(overrides?: CallOverrides): Promise<BigNumber>;

    'borrowRateLimits()'(overrides?: CallOverrides): Promise<BigNumber>;

    borrowTokensToLiquidate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'borrowTokensToLiquidate(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    calculateBorrowableAmount(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'calculateBorrowableAmount(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateCurrentCollateralRatio(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'calculateCurrentCollateralRatio(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateCurrentDebt(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateCurrentDebt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterest(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateInterest(uint256,uint256,uint256)'(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInterestAccrued(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'calculateInterestAccrued(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalCollateralTokens(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'calculateTotalCollateralTokens(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'cancel(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    close(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'close(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    collateralShareInStrategy(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'collateralShareInStrategy(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    creditLineConstants(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'creditLineConstants(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    creditLineCounter(overrides?: CallOverrides): Promise<BigNumber>;

    'creditLineCounter()'(overrides?: CallOverrides): Promise<BigNumber>;

    creditLineVariables(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'creditLineVariables(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    depositCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'depositCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCreditLineStatus(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getCreditLineStatus(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    idealCollateralRatioLimits(overrides?: CallOverrides): Promise<BigNumber>;

    'idealCollateralRatioLimits()'(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(address,uint256,address,uint256)'(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'liquidate(uint256,bool)'(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    repay(_id: BigNumberish, _amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'repay(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    request(
      _requestTo: string,
      _borrowLimit: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _borrowAssetStrategy: string,
      _collateralAsset: string,
      _collateralStrategy: string,
      _requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'request(address,uint128,uint128,bool,uint256,address,address,address,address,bool)'(
      _requestTo: string,
      _borrowLimit: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _borrowAssetStrategy: string,
      _collateralAsset: string,
      _collateralStrategy: string,
      _requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateBorrowLimit(
      _id: BigNumberish,
      _newBorrowLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateBorrowLimit(uint256,uint128)'(
      _id: BigNumberish,
      _newBorrowLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBorrowLimitLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateBorrowLimitLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBorrowRateLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateBorrowRateLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIdealCollateralRatioLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateIdealCollateralRatioLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiquidatorRewardFraction(
      _rewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateLiquidatorRewardFraction(uint256)'(
      _rewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProtocolFeeFraction(_protocolFee: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllCollateral(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawAllCollateral(uint256,bool)'(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawableCollateral(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawableCollateral(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    PRICE_ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PRICE_ORACLE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SAVINGS_ACCOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'SAVINGS_ACCOUNT()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STRATEGY_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'STRATEGY_REGISTRY()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accept(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'accept(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    borrow(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'borrow(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowLimitLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'borrowLimitLimits()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowRateLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'borrowRateLimits()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowTokensToLiquidate(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'borrowTokensToLiquidate(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateBorrowableAmount(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateBorrowableAmount(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateCurrentCollateralRatio(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateCurrentCollateralRatio(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateCurrentDebt(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'calculateCurrentDebt(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateInterest(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculateInterest(uint256,uint256,uint256)'(
      _principal: BigNumberish,
      _borrowRate: BigNumberish,
      _timeElapsed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInterestAccrued(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'calculateInterestAccrued(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateTotalCollateralTokens(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateTotalCollateralTokens(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'cancel(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    close(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'close(uint256)'(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    collateralShareInStrategy(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'collateralShareInStrategy(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditLineConstants(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'creditLineConstants(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditLineCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'creditLineCounter()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditLineVariables(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'creditLineVariables(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'depositCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _fromSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCreditLineStatus(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getCreditLineStatus(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idealCollateralRatioLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'idealCollateralRatioLimits()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(address,uint256,address,uint256)'(
      _owner: string,
      _protocolFeeFraction: BigNumberish,
      _protocolFeeCollector: string,
      _liquidatorRewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'liquidate(uint256,bool)'(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidatorRewardFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'liquidatorRewardFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'protocolFeeCollector()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'protocolFeeFraction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    repay(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'repay(uint256,uint256)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    request(
      _requestTo: string,
      _borrowLimit: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _borrowAssetStrategy: string,
      _collateralAsset: string,
      _collateralStrategy: string,
      _requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'request(address,uint128,uint128,bool,uint256,address,address,address,address,bool)'(
      _requestTo: string,
      _borrowLimit: BigNumberish,
      _borrowRate: BigNumberish,
      _autoLiquidation: boolean,
      _collateralRatio: BigNumberish,
      _borrowAsset: string,
      _borrowAssetStrategy: string,
      _collateralAsset: string,
      _collateralStrategy: string,
      _requestAsLender: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBorrowLimit(
      _id: BigNumberish,
      _newBorrowLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateBorrowLimit(uint256,uint128)'(
      _id: BigNumberish,
      _newBorrowLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBorrowLimitLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateBorrowLimitLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBorrowRateLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateBorrowRateLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIdealCollateralRatioLimits(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateIdealCollateralRatioLimits(uint256,uint256)'(
      _min: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiquidatorRewardFraction(
      _rewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateLiquidatorRewardFraction(uint256)'(
      _rewardFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolFeeCollector(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateProtocolFeeCollector(address)'(
      _protocolFeeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolFeeFraction(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'updateProtocolFeeFraction(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllCollateral(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawAllCollateral(uint256,bool)'(
      _id: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawCollateral(uint256,uint256,bool)'(
      _id: BigNumberish,
      _amount: BigNumberish,
      _toSavingsAccount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawableCollateral(_id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'withdrawableCollateral(uint256)'(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
